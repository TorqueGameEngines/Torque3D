//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------

// Material Editor originally created by Dave Calabrese and Travis Vroman of Gaslight Studios
$MaterialEditor::emptyMaterialImage = "ToolsModule:unknownImage_image";

function MaterialEditorGui::establishMaterials(%this)
{
   //Cubemap used to preview other cubemaps in the editor.
   singleton CubemapData( matEdCubeMapPreviewMat )
   {
      cubeMapFaceAsset[0] = "ToolsModule:cube_xNeg_image";
      cubeMapFaceAsset[1] = "ToolsModule:cube_xPos_image";
      cubeMapFaceAsset[2] = "ToolsModule:cube_zNeg_image";
      cubeMapFaceAsset[3] = "ToolsModule:cube_zPos_image";
      cubeMapFaceAsset[4] = "ToolsModule:cube_yNeg_image";
      cubeMapFaceAsset[5] = "ToolsModule:cube_yPos_image";
      parentGroup = "RootGroup";
   };
   
   //Material used to preview other materials in the editor.
   if(!isObject(materialEd_previewMaterial))
   {
      singleton Material(materialEd_previewMaterial)
      {
         mapTo = "matEd_mappedMat";
         diffuseMapAsset[0] = "ToolsModule:matEd_mappedMat_image";
      };
   }

   if(!isObject(materialEd_previewMaterial))
   {
      singleton CustomMaterial( materialEd_justAlphaMaterial )
      {
         mapTo = "matEd_mappedMatB";
         texture[0] = materialEd_previewMaterial.getdiffuseMap(0);
      };
   }

   if(!isObject(materialEd_previewMaterial))
   {
      //Custom shader to allow the display of just the alpha channel. 
      singleton ShaderData( materialEd_justAlphaShader )
      {
         DXVertexShaderFile 	= "shaders/alphaOnlyV.hlsl";
         DXPixelShaderFile 	= "shaders/alphaOnlyP.hlsl";
         pixVersion = 1.0;
      };
   }
}

function MaterialEditorGui::open(%this)
{
   MaterialEditorGui.establishMaterials();

	// We hide these specific windows here due too there non-modal nature.
	// These guis are also pushed onto Canvas, which means they shouldn't be parented
	// by editorgui
	materialSelector.setVisible(0);
	matEdSaveDialog.setVisible(0);
	
	MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(0);
	
	//Setup our dropdown menu contents.
   //Blending Modes
   MaterialEditorPropertiesWindow-->blendingTypePopUp.clear();
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(None,0);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(preMul,1);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(LerpAlpha,2);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(Mul,3);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(Add,4);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(AddAlpha,5);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.add(Sub,6);
   MaterialEditorPropertiesWindow-->blendingTypePopUp.setSelected( 0, false );

   //Reflection Types
   MaterialEditorPropertiesWindow-->reflectionTypePopUp.clear();
   MaterialEditorPropertiesWindow-->reflectionTypePopUp.add("None",0);	
   MaterialEditorPropertiesWindow-->reflectionTypePopUp.add("cubemap",1);	
   MaterialEditorPropertiesWindow-->reflectionTypePopUp.setSelected( 0, false );

   //Sounds
   MaterialEditorPropertiesWindow-->footstepSoundPopup.clear();
   MaterialEditorPropertiesWindow-->impactSoundPopup.clear();

   %sounds = "<None>" TAB "<Soft>" TAB "<Hard>" TAB "<Metal>" TAB "<Snow>";    // Default sounds

   %assetQuery = new AssetQuery();
   AssetDatabase.findAssetType(%assetQuery, "SoundAsset");
   
   %count = %assetQuery.getCount();   
   // Get custom sound assets
   for(%i=0; %i < %count; %i++)
   {
	   %assetId = %assetQuery.getAsset(%i);
       %sounds = %sounds TAB %assetId;
   }

   %count = getFieldCount(%sounds);
   for (%i = 0; %i < %count; %i++)
   {
      %name = getField(%sounds, %i);
      MaterialEditorPropertiesWindow-->footstepSoundPopup.add(%name);
      MaterialEditorPropertiesWindow-->impactSoundPopup.add(%name);
   }

   //Preview Models
   matEd_quickPreview_Popup.clear();
   matEd_quickPreview_Popup.add("Cube",0);
   matEd_quickPreview_Popup.add("Sphere",1);
   matEd_quickPreview_Popup.add("Pyramid",2);
   matEd_quickPreview_Popup.add("Cylinder",3);
   matEd_quickPreview_Popup.add("Torus",4);
   matEd_quickPreview_Popup.add("Knot",5);  
   matEd_quickPreview_Popup.setSelected( 0, false );
   matEd_quickPreview_Popup.selected = matEd_quickPreview_Popup.getText();
   
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.clear();		
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.add("Layer 0",0);		
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.add("Layer 1",1);		
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.add("Layer 2",2);		
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.add("Layer 3",3);	
   MaterialEditorPropertiesWindow-->MaterialLayerCtrl.setSelected( 0, false );
   
   //Sift through the RootGroup and find all loaded material items.
   MaterialEditorGui.updateAllFields();
   MaterialEditorGui.updatePreviewObject();

   // If no selected object; go to material mode. And edit the last selected material
   MaterialEditorGui.setMode();
   
   MaterialEditorGui.preventUndo = true;   
   
   if( MaterialEditorGui.currentMode $= "Mesh" )
      MaterialEditorGui.prepareActiveObject( true );
   else
      MaterialEditorGui.prepareActiveMaterial( "", true );
      
   MaterialEditorGui.preventUndo = false;   
      
}

function MaterialEditorGui::quit(%this)
{
   // if we quit, restore with notDirty
   if(MaterialEditorGui.materialDirty)
   {
      //keep on doing this
      MaterialEditorGui.copyMaterials( notDirtyMaterial, materialEd_previewMaterial );
      MaterialEditorGui.copyMaterials( notDirtyMaterial, MaterialEditorGui.currentMaterial );
      MaterialEditorGui.guiSync( materialEd_previewMaterial );
      
      materialEd_previewMaterial.flush();
      materialEd_previewMaterial.reload();
      MaterialEditorGui.currentMaterial.flush();
      MaterialEditorGui.currentMaterial.reload();
   }
   
   if( isObject(MaterialEditorGui.currentMaterial) )
   {
      MaterialEditorGui.lastMaterial = MaterialEditorGui.currentMaterial.getName();
   }

   MaterialEditorGui.setMaterialNotDirty();
   
   // First delete the model so that it releases
   // material instances that use the preview materials.
   matEd_previewObjectView.deleteModel();
   
   // Now we can delete the preview materials and shaders
   // knowing that there are no matinstances using them.
   matEdCubeMapPreviewMat.delete();
   //materialEd_previewMaterial.delete();
   materialEd_justAlphaMaterial.delete();
   materialEd_justAlphaShader.delete();
}

function MaterialEditorGui::openFile( %this, %fileType )
{
	switch$(%fileType)
	{
		case "Texture":         %filters = MaterialEditorGui.textureFormats;
		
		                if(MaterialEditorGui.lastTextureFile $= "")
		                  %defaultFileName = "*.*";
                      else
							   %defaultFileName = MaterialEditorGui.lastTextureFile;
							   
							     %defaultPath = MaterialEditorGui.lastTexturePath;
							     
      case "Model":           %filters = MaterialEditorGui.modelFormats;
							 %defaultFileName = "*.dts";
							     %defaultPath = MaterialEditorGui.lastModelPath;
	}
	
      %dlg = new OpenFileDialog()
      {
         Filters        = %filters;
         DefaultPath    = %defaultPath;
         DefaultFile    = %defaultFileName;
         ChangePath     = false;
         MustExist      = true;
      };
            
      %ret = %dlg.Execute();
      if(%ret)
      {
         switch$(%fileType)
	      {
	         case "Texture":
               MaterialEditorGui.lastTexturePath = filePath( %dlg.FileName );
               MaterialEditorGui.lastTextureFile = %filename = %dlg.FileName;
               
            case "Model":
               MaterialEditorGui.lastModelPath = filePath( %dlg.FileName );
               MaterialEditorGui.lastModelFile = %filename = %dlg.FileName;
	      }
      }
      
      %dlg.delete();
      
      if(!%ret)
         return;
		else
		   return makeRelativePath( %filename, getMainDotCsDir() );
}

function MaterialEditorGui::selectMaterialAsset(%this, %assetId)
{
   AssetBrowser.editAsset(%assetId);
}

//==============================================================================
// SubMaterial(Material Target) -- Supports different ways to grab the 
// material from the dropdown list. We're here either because-
// 1. We have switched over from another editor with an object locked in the 
//    $Tools::materialEditorList variable
// 2. We have selected an object using the Object Editor via the Material Editor 

function SubMaterialSelector::onSelect( %this )
{
   %material = "";   
   
   if( MaterialEditorGui.currentMeshMode $= "Model" )
      %material = getMapEntry( %this.getText() );
   else
      %material = MaterialEditorGui.currentObject.getFieldValue( %this.getText() );
   
   %origMat = %material;   
   if(%material$="")   
        %origMat = %material = %this.getText();
   // if there is no material attached to that objects material field or the 
   // object does not have a valid method to grab a material
   if( !isObject( %material ) )
   {
      if(!AssetDatabase.isDeclaredAsset(%material))
      {
         return;
      }
      else
      {
         MaterialEditorGui.currentMaterialAsset = %material;
         %assetDef = AssetDatabase.acquireAsset(%material);
         %material = %assetDef.materialDefinitionName;  
      }
      /*// look for a newMaterial name to grab
      // addiitonally, convert "." to "_" in case we have something like: "base.texname" as a material name   
      // at the end we will have generated material name: "base_texname_mat"   
      %material = getUniqueName( strreplace(%material, ".", "_") @ "_mat" );

      new Material(%material) 
      {
         diffuseMap[0] = %origMat;   
         mapTo = %origMat;
         parentGroup = RootGroup;
      };
      
      eval( "MaterialEditorGui.currentObject." @ strreplace(%this.getText(),".","_") @ " = " @ %material @ ";");
      
      if( MaterialEditorGui.currentObject.isMethod("postApply") )
         MaterialEditorGui.currentObject.postApply();*/
   }
   else
   {
      %materialAssetId = MaterialAsset::getAssetIdByMaterialName(%material);
      if(%materialAssetId !$= "" && %materialAssetId !$= $Core::NoMaterialAssetFallback)
      {
         MaterialEditorGui.currentMaterialAsset = %materialAssetId;
         %assetDef = AssetDatabase.acquireAsset(%material);
      }
   }

   MaterialEditorGui.prepareActiveMaterial( %material.getId() );
}

//==============================================================================
// Select object logic (deciding material/target mode)

function MaterialEditorGui::setMode( %this )
{
   MatEdMaterialMode.setVisible(0);
   MatEdTargetMode.setVisible(0);
   
   if( isObject(MaterialEditorGui.currentObject) )
   {
      MaterialEditorGui.currentMode = "Mesh";
      MatEdTargetMode.setVisible(1);
   }
   else
   {
      MaterialEditorGui.currentMode = "Material";
      MatEdMaterialMode.setVisible(1);
      EWorldEditor.clearSelection();
   }
}

function MaterialEditorGui::prepareActiveObject( %this, %override )
{
   %obj = $Tools::materialEditorList;
   if( MaterialEditorGui.currentObject == %obj && !%override)
      return;
   
   // TSStatics and ShapeBase objects should have getModelFile methods
   if( %obj.isMethod( "getModelFile" ) )
   {
      MaterialEditorGui.currentObject = %obj;
      
      SubMaterialSelector.clear();
      MaterialEditorGui.currentMeshMode = "Model";
      
      MaterialEditorGui.setMode();
      
      for(%j = 0; %j < MaterialEditorGui.currentObject.getTargetCount(); %j++)
      {
         %target = MaterialEditorGui.currentObject.getTargetName(%j);
         %count = SubMaterialSelector.getCount();
         SubMaterialSelector.add(%target);
      }
   }
   else // Other classes that support materials if possible
   {
      %canSupportMaterial = false;
      for( %i = 0; %i < %obj.getFieldCount(); %i++ )
      {
         %fieldName = %obj.getField(%i);
         
         if( %obj.getFieldType(%fieldName) !$= "TypeMaterialAssetId" /*&& %obj.getFieldType(%fieldName) !$= "TypeMaterialName"*/)
            continue;
      
         if( !%canSupportMaterial )
         {
            MaterialEditorGui.currentObject = %obj;
            SubMaterialSelector.clear();
            SubMaterialSelector.add(%fieldName, 0);
         }
         else
         {
            %count = SubMaterialSelector.getCount();
            SubMaterialSelector.add(%fieldName, %count);
         }
         %canSupportMaterial = true;
      }
      
      if( !%canSupportMaterial ) // Non-relevant classes get returned
         return;

      MaterialEditorGui.currentMeshMode = "EditorShape";
      MaterialEditorGui.setMode();
   }
   
   %id = SubMaterialSelector.findText( MaterialEditorGui.currentMaterial.mapTo );
   if( %id != -1 )
      SubMaterialSelector.setSelected( %id );
   else
      SubMaterialSelector.setSelected(0);	   
}

//==============================================================================
// Helper functions to help create categories and manage category lists

function MaterialEditorGui::updateAllFields(%this)
{
	matEd_cubemapEd_availableCubemapList.clear();
}

function MaterialEditorGui::updatePreviewObject(%this)
{   
   %newModel = matEd_quickPreview_Popup.getValue();

   switch$(%newModel)
	{
		case "sphere":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/spherepreview.dts");
         matEd_previewObjectView.setOrbitDistance(4);
				
		case "cube":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/cubepreview.dts");
         matEd_previewObjectView.setOrbitDistance(5);
				
		case "pyramid":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/pyramidpreview.dts");
         matEd_previewObjectView.setOrbitDistance(5);
				
		case "cylinder":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/cylinderpreview.dts");
         matEd_previewObjectView.setOrbitDistance(4.2);
				
		case "torus":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/toruspreview.dts");
         matEd_previewObjectView.setOrbitDistance(4.2);
				
		case "knot":
         matEd_quickPreview_Popup.selected = %newModel;
         matEd_previewObjectView.setModel("tools/materialEditor/gui/torusknotpreview.dts");
	}
}

//==============================================================================
// Helper functions to help load and update the preview and active material

// Finds the selected line in the material list, then makes it active in the editor.
function MaterialEditorGui::prepareActiveMaterial(%this, %material, %override)
{
   // If were not valid, grab the first valid material out of the materialSet
   if( !isObject(%material) )
      return;
      //%material = MaterialSet.getObject(0);
	
	// Check made in order to avoid loading the same material. Overriding
	// made in special cases
	if(%material $= MaterialEditorGui.lastMaterial && !%override)
	{
	   return;
	}
   else
   {
      if(MaterialEditorGui.materialDirty )
      { 
         MaterialEditorGui.showSaveDialog( %material );
         return;
      }
		   
      MaterialEditorGui.setActiveMaterial(%material);
   }
}

// Updates the preview material to use the same properties as the selected material,
// and makes that material active in the editor.
function MaterialEditorGui::setActiveMaterial( %this, %material )
{
   // Warn if selecting a CustomMaterial (they can't be properly previewed or edited)
   if ( isObject( %material ) && %material.isMemberOfClass( "CustomMaterial" ) )
   {
      toolsMessageBoxOK( "Warning", "The selected Material (" @ %material.getName() @
         ") is a CustomMaterial, and cannot be edited using the Material Editor." );
      return;
   }

   MaterialEditorGui.currentMaterial = %material;
   MaterialEditorGui.lastMaterial = %material;
   
   // we create or recreate a material to hold in a pristine state
   if(isObject(notDirtyMaterial))
      notDirtyMaterial.delete();
      
   singleton Material(notDirtyMaterial)
   {
      mapTo = "matEd_mappedMat";
      diffuseMapAsset[0] = "ToolsModule:matEd_mappedMat_image";
   };
   
   // Converts the texture files into absolute paths.
   MaterialEditorGui.convertTextureFields();

   // If we're allowing for name changes, make sure to save the name seperately
   %this.originalName = MaterialEditorGui.currentMaterial.name;

   // Copy materials over to other references
   MaterialEditorGui.copyMaterials( MaterialEditorGui.currentMaterial, materialEd_previewMaterial );
   MaterialEditorGui.copyMaterials( MaterialEditorGui.currentMaterial, notDirtyMaterial );
   MaterialEditorGui.guiSync( materialEd_previewMaterial );   
     
   // Necessary functionality in order to render correctly
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   MaterialEditorGui.currentMaterial.flush();
   MaterialEditorGui.currentMaterial.reload();
      
   MaterialEditorGui.setMaterialNotDirty();
}

function MaterialEditorGui::isMatEditorMaterial(%this, %material)
{
   return ( %material.getFilename() $= "" ||
            %material.getFilename() $= "tools/gui/materialSelector.ed.gui" ||
            %material.getFilename() $= "tools/materialEditor/scripts/materialEditor.ed." @ $TorqueScriptFileExtension );
}

function MaterialEditorGui::setMaterialNotDirty(%this)
{
   %propertyText = "Material Properties";
   %previewText = "Material Preview";
   MaterialEditorPropertiesWindow.text = %propertyText;
   MaterialEditorPreviewWindow.text = %previewText;
   
   MaterialEditorGui.materialDirty = false;
   matEd_PersistMan.removeDirty(MaterialEditorGui.currentMaterial);
}

function MaterialEditorGui::setMaterialDirty(%this)
{ 
   %propertyText = "Material Properties *";
   %previewText = "Material Preview *";
   MaterialEditorPropertiesWindow.text = %propertyText;
   MaterialEditorPreviewWindow.text = %previewText;
   
   MaterialEditorGui.materialDirty = true;
   
   // materials created in the material selector are given that as its filename, so we run another check
   if( MaterialEditorGui.isMatEditorMaterial( MaterialEditorGui.currentMaterial ) )
   {
      %currentMatFilename = MaterialEditorGui.currentMaterial.getFilename();

      if(%currentMatFilename !$= "")
      {
           matEd_PersistMan.setDirty(MaterialEditorGui.currentMaterial, %currentMatFilename);
      }
      else if( MaterialEditorGui.currentMaterial.isAutoGenerated() )
      {
         %obj = MaterialEditorGui.currentObject;
         
         if( %obj.shapeName !$= "" ) 
            %shapePath = %obj.shapeName;
         else if( %obj.isMethod("getDatablock") )
         {
            if( %obj.getDatablock().shapeFile !$= "" )
               %shapePath = %obj.getDatablock().shapeFile;
         }
         
         //creating toPath
         %k = 0;
         while( strpos( %shapePath, "/", %k ) != -1 )
         {
            %pos = strpos( %shapePath, "/", %k );
            %k = %pos + 1;
         }
         %savePath = getSubStr( %shapePath , 0 , %k );
         %savePath = %savePath @ "materials." @ $TorqueScriptFileExtension;
         
         matEd_PersistMan.setDirty(MaterialEditorGui.currentMaterial, %savePath);
      }
   }
   else
      matEd_PersistMan.setDirty(MaterialEditorGui.currentMaterial, MaterialEditorGui.defaultMaterialFile);
}

function MaterialEditorGui::convertTextureFields(%this)
{
   // Find the absolute paths for the texture filenames so that
   // we can properly wire up the preview materials and controls.
   
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "DiffuseMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "NormalMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "OverlayMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "DetailMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "LightMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "ToneMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "ORMConfigMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "RoughMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "AOMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "MetalMap");
   %this.convertMaterialTextureField(MaterialEditorGui.currentMaterial, "GlowMap");
   }
   
function MaterialEditorGui::convertMaterialTextureField(%this, %material, %mapName)
   {
   for(%index = 0; %index < 4; %index++)
   {
      %mapFile = %material.call("get" @ %mapName, %index);
      if(%mapFile !$= "" && !isFile(%mapFile))
   {
         //see if we can't go finding it 
         %mapFile = MaterialEditorGui.searchForTexture(MaterialEditorGui.currentMaterial, %mapFile);      
         MaterialEditorGui.currentMaterial.call("set" @ %mapName, %mapFile, %index);
   }
   }
}

// still needs to be optimized further
function MaterialEditorGui::searchForTexture(%this,%material, %texture)
{   
   if( %texture !$= "" )
   {
      if(AssetDatabase.isDeclaredAsset(%texture))
      {
         %assetDef = AssetDatabase.acquireAsset(%texture);
         %imagePath = %assetDef.getImagePath();
         AssetDatabase.releaseAsset(%texture);
         
         return %imagePath;
      }
      // set the find signal as false to start out with 
      %isFile = false;
      // sete the formats we're going to be looping through if need be
      %formats = ".png .jpg .dds .bmp .gif .jng .tga";
      
      // if the texture contains the correct filepath and name right off the bat, lets use it
      if( isFile(%texture) )
         %isFile = true;
      else
      {
         
         for( %i = 0; %i < getWordCount(%formats); %i++)
         {
            %testFileName = %texture @ getWord( %formats, %i );
            if(isFile(%testFileName))
            {
               %isFile = true;
               break;
            }
         }
      }
      
      // if we didn't grab a proper name, lets use a string logarithm
      if( !%isFile )
      {
         %materialDiffuse = %texture;
         %materialDiffuse2 = %texture;
         
         %materialPath = %material.getFilename();
         
         if( strchr( %materialDiffuse, "/") $= "" )
         {
            %k = 0;
            while( strpos( %materialPath, "/", %k ) != -1 )
            {
               %count = strpos( %materialPath, "/", %k );
               %k = %count + 1;
            }
         
            %materialsCs = getSubStr( %materialPath , %k , 99 );
            %texture =  strreplace( %materialPath, %materialsCs, %texture );
         }
         else
            %texture =  strreplace( %materialPath, %materialPath, %texture );
         
         
         // lets test the pathing we came up with
         if( isFile(%texture) )
            %isFile = true;
         else
         {
            for( %i = 0; %i < getWordCount(%formats); %i++)
            {
               %testFileName = %texture @ getWord( %formats, %i );
               if(isFile(%testFileName))
               {
                  %isFile = true;
                  break;
               }
            }
         }
         
         // as a last resort to find the proper name
         // we have to resolve using find first file functions very very slow
         if( !%isFile )
         {
            %k = 0;
            while( strpos( %materialDiffuse2, "/", %k ) != -1 )
            {
               %count = strpos( %materialDiffuse2, "/", %k );
               %k = %count + 1;
            }
            
            %texture =  getSubStr( %materialDiffuse2 , %k , 99 );
            for( %i = 0; %i < getWordCount(%formats); %i++)
            {
               %searchString = "*" @ %texture @ getWord( %formats, %i );
               %testFileName = findFirstFile( %searchString );
               if( isFile(%testFileName) )
               {
                  %texture = %testFileName;
                  %isFile = true;
                  break;
               }
            }
         }
         
         return %texture;
      }
      else
         return %texture; //Texture exists and can be found - just return the input argument.
   }

   return ""; //No texture associated with this property.
}

function MaterialEditorGui::updateLivePreview(%this,%preview)
{
   // When checkbox is selected, preview the material in real time, if not; then don't
   if( %preview )
      MaterialEditorGui.copyMaterials( materialEd_previewMaterial, MaterialEditorGui.currentMaterial );
   else
      MaterialEditorGui.copyMaterials( notDirtyMaterial, MaterialEditorGui.currentMaterial );
   
   MaterialEditorGui.currentMaterial.flush();
   MaterialEditorGui.currentMaterial.reload();
}

function MaterialEditorGui::copyMaterials( %this, %copyFrom, %copyTo)
{
   // Make sure we copy and restore the map to.
   %mapTo = %copyTo.mapTo;
   %copyTo.assignFieldsFrom( %copyFrom );
   %copyTo.mapTo = %mapTo;

}

function MaterialEditorGui::guiSync( %this, %material )
{
   %this.preventUndo = true;
   //Setup our headers
   if( MaterialEditorGui.currentMode $= "material" )
   {
      MatEdMaterialMode-->selMaterialName.setText(MaterialEditorGui.currentMaterial.name);
      MatEdMaterialMode-->selMaterialMapTo.setText(MaterialEditorGui.currentMaterial.mapTo);
   }
   else
   {
      if( MaterialEditorGui.currentObject.isMethod("getModelFile") )
      {
         %sourcePath = MaterialEditorGui.currentObject.getModelFile();
         if( %sourcePath !$= "" )
         {
            MatEdTargetMode-->selMaterialMapTo.ToolTip = %sourcePath;
            %sourceName = fileName(%sourcePath);
            MatEdTargetMode-->selMaterialMapTo.setText(%sourceName);
            MatEdTargetMode-->selMaterialName.setText(MaterialEditorGui.currentMaterial.name);
         }
      }
      else
      {
         %info = MaterialEditorGui.currentObject.getClassName();
         MatEdTargetMode-->selMaterialMapTo.ToolTip = %info;
         MatEdTargetMode-->selMaterialMapTo.setText(%info);
         MatEdTargetMode-->selMaterialName.setText(MaterialEditorGui.currentMaterial.name);
      }
   }
   
   MaterialEditorPropertiesWindow-->alphaRefTextEdit.setText((%material).alphaRef);
   MaterialEditorPropertiesWindow-->alphaRefSlider.setValue((%material).alphaRef);
   MaterialEditorPropertiesWindow-->doubleSidedCheckBox.setValue((%material).doubleSided);
   MaterialEditorPropertiesWindow-->transZWriteCheckBox.setValue((%material).translucentZWrite);
   MaterialEditorPropertiesWindow-->alphaTestCheckBox.setValue((%material).alphaTest);
   MaterialEditorPropertiesWindow-->castShadows.setValue((%material).castShadows);
   MaterialEditorPropertiesWindow-->castDynamicShadows.setValue((%material).castDynamicShadows);
   MaterialEditorPropertiesWindow-->translucentCheckbox.setValue((%material).translucent);
   switch$((%material).translucentBlendOp)
   {
        case "None": %selectedNum = 0;
        case "preMul": %selectedNum = 1;
        case "LerpAlpha": %selectedNum = 2;
        case "Mul": %selectedNum = 3;
        case "": %selectedNum = 4;
        case "AddAlpha": %selectedNum = 5;
        case "Sub": %selectedNum = 6;
   }
   MaterialEditorPropertiesWindow-->blendingTypePopUp.setSelected(%selectedNum);
   
   if((%material).cubemap !$= "")
   {
      MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(1);
      MaterialEditorPropertiesWindow-->reflectionTypePopUp.setSelected(1);
   }
   else if((%material).dynamiccubemap)
   {
      MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(0);
      MaterialEditorPropertiesWindow-->reflectionTypePopUp.setSelected(2);
   }
   else if((%material).planarReflection)
   {
      MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(0);
      MaterialEditorPropertiesWindow-->reflectionTypePopUp.setSelected(3);
   }
   else
   {
      MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(0);
      MaterialEditorPropertiesWindow-->reflectionTypePopUp.setSelected(0);
   }

   MaterialEditorPropertiesWindow-->effectColor0Swatch.color = (%material).effectColor[0];
   MaterialEditorPropertiesWindow-->effectColor1Swatch.color = (%material).effectColor[1];
   MaterialEditorPropertiesWindow-->showFootprintsCheckbox.setValue((%material).showFootprints);
   MaterialEditorPropertiesWindow-->showDustCheckbox.setValue((%material).showDust);
   MaterialEditorGui.updateSoundPopup("Footstep", (%material).footstepSoundId, (%material).customFootstepSound);
   MaterialEditorGui.updateSoundPopup("Impact", (%material).impactSoundId, (%material).customImpactSound);

   //layer specific controls are located here
   %layer = MaterialEditorGui.currentLayer;
   
   //Diffuse
   %diffuseMap = (%material).getDiffuseMap(%layer);
   %diffuseMapText = %diffuseMap !$= "" && %diffuseMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getDiffuseMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->diffuseMapNameText.setText( %diffuseMapText );      
   MaterialEditorPropertiesWindow-->diffuseMapDisplayBitmap.setBitmap( getAssetPreviewImage(%diffuseMap) );
 
   //Normal
   %normalMap = (%material).getNormalMap(%layer);
   %normalMapText = %normalMap !$= "" && %normalMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getNormalMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->normalMapNameText.setText( %normalMapText );      
   MaterialEditorPropertiesWindow-->normalMapDisplayBitmap.setBitmap( getAssetPreviewImage(%normalMap) );
   
   //ORM Config
   %ormMap = (%material).getORMConfigMap(%layer);
   %hasOrmMap = (%ormMap !$= "" && %ormMap !$=$MaterialEditor::emptyMaterialImage);
   %ormMapText = %hasOrmMap ? (%material).getORMConfigMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->ORMConfigMapNameText.setText(%ormMapText );      
   MaterialEditorPropertiesWindow-->ORMConfigMapDisplayBitmap.setBitmap( getAssetPreviewImage(%ormMap) );

   //show or hide depending on if we have a map assigned here
   MaterialEditorPropertiesWindow-->RoughnessTextEdit.setVisible(!%hasOrmMap);
   MaterialEditorPropertiesWindow-->RoughnessSlider.setVisible(!%hasOrmMap);
   MaterialEditorPropertiesWindow-->MetalnessTextEdit.setVisible(!%hasOrmMap);
   MaterialEditorPropertiesWindow-->MetalnessSlider.setVisible(!%hasOrmMap);
   
   if(%hasOrmMap)
   {
      MaterialEditorPropertiesWindow-->isSRGBCheckbox.setValue((%material).isSRGB[%layer]);
      MaterialEditorPropertiesWindow-->invertRoughnessCheckbox.setValue((%material).invertRoughness[%layer]);
   }
   else
   {
      MaterialEditorPropertiesWindow-->RoughnessSlider.setValue((%material).roughness, true);
      MaterialEditorPropertiesWindow-->MetalnessSlider.setValue((%material).metalness, true);
   }
      
   MaterialEditorPropertiesWindow-->isSRGBCheckbox.setVisible(%hasOrmMap);
   MaterialEditorPropertiesWindow-->invertRoughnessCheckbox.setVisible(%hasOrmMap);
   
   //AOMap
   %aoMap = (%material).getAOMap(%layer);
   %aoMapText = %aoMap !$= "" && %aoMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getAOMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->aoMapNameText.setText( %aoMapText );      
   MaterialEditorPropertiesWindow-->aoMapDisplayBitmap.setBitmap( getAssetPreviewImage(%aoMap) );
   
   //RoughMap
   %roughMap = (%material).getRoughMap(%layer);
   %roughMapText = %roughMap !$= "" && %roughMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getRoughMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->roughMapNameText.setText( %roughMapText );      
   MaterialEditorPropertiesWindow-->roughMapDisplayBitmap.setBitmap( getAssetPreviewImage(%roughMap) );
   
   //MetalMap
   %metalMap = (%material).getMetalMap(%layer);
   %metalMapText = %metalMap !$= "" && %metalMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getMetalMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->metalMapNameText.setText( %metalMapText );      
   MaterialEditorPropertiesWindow-->metalMapDisplayBitmap.setBitmap( getAssetPreviewImage(%metalMap) );
   
   //GlowMap
   %glowMap = (%material).getGlowMap(%layer);
   %glowMapText = %glowMap !$= "" && %glowMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getGlowMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->glowMapNameText.setText( %glowMapText );      
   MaterialEditorPropertiesWindow-->glowMapDisplayBitmap.setBitmap( getAssetPreviewImage(%glowMap) );
      
   //Overlay
   %overlayMap = (%material).getOverlayMap(%layer);
   %overlayMapText = %overlayMap !$= "" && %overlayMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getOverlayMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->overlayMapNameText.setText( %overlayMapText );      
   MaterialEditorPropertiesWindow-->overlayMapDisplayBitmap.setBitmap( getAssetPreviewImage(%overlayMap) );
   
   //Detail
   %detailMap = (%material).getDetailMap(%layer);
   %detailMapText = %detailMap !$= "" && %detailMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getDetailMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->detailMapNameText.setText( %detailMapText );      
   MaterialEditorPropertiesWindow-->detailMapDisplayBitmap.setBitmap( getAssetPreviewImage(%detailMap) );
   
   //Detail Normal
   %detailNormalMap = (%material).getDetailNormalMap(%layer);
   %detailNormalMapText = %detailNormalMap !$= "" && %detailNormalMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getDetailNormalMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->detailNormalMapNameText.setText( %detailNormalMapText );      
   MaterialEditorPropertiesWindow-->detailNormalMapDisplayBitmap.setBitmap( getAssetPreviewImage(%detailNormalMap) );
   
   //Light
   %lightMap = (%material).getLightMap(%layer);
   %lightMapText = %lightMap !$= "" && %lightMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getLightMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->lightMapNameText.setText( %lightMapText );      
   MaterialEditorPropertiesWindow-->lightMapDisplayBitmap.setBitmap( getAssetPreviewImage(%lightMap) );
   
   //Tone
   %toneMap = (%material).getToneMap(%layer);
   %toneMapText = %toneMap !$= "" && %toneMap !$=$MaterialEditor::emptyMaterialImage ? (%material).getToneMapAsset(%layer) : "None";
   MaterialEditorPropertiesWindow-->toneMapNameText.setText( %toneMapText );      
   MaterialEditorPropertiesWindow-->toneMapDisplayBitmap.setBitmap( getAssetPreviewImage(%toneMap) );
   
   MaterialEditorPropertiesWindow-->accuScaleTextEdit.setText((%material).accuScale[%layer]);
   MaterialEditorPropertiesWindow-->accuScaleTextEdit.setText((%material).accuScale[%layer]);
   MaterialEditorPropertiesWindow-->accuDirectionTextEdit.setText((%material).accuDirection[%layer]);
   MaterialEditorPropertiesWindow-->accuDirectionTextEdit.setText((%material).accuDirection[%layer]);
   MaterialEditorPropertiesWindow-->accuStrengthTextEdit.setText((%material).accuStrength[%layer]);
   MaterialEditorPropertiesWindow-->accuStrengthTextEdit.setText((%material).accuStrength[%layer]);
   MaterialEditorPropertiesWindow-->accuCoverageTextEdit.setText((%material).accuCoverage[%layer]);
   MaterialEditorPropertiesWindow-->accuCoverageTextEdit.setText((%material).accuCoverage[%layer]);
   MaterialEditorPropertiesWindow-->accuSpecularTextEdit.setText((%material).accuSpecular[%layer]);
   MaterialEditorPropertiesWindow-->accuSpecularTextEdit.setText((%material).accuSpecular[%layer]);
   
   MaterialEditorPropertiesWindow-->detailScaleTextEdit.setText( getWord((%material).detailScale[%layer], 0) );
   MaterialEditorPropertiesWindow-->detailNormalStrengthTextEdit.setText( getWord((%material).detailNormalMapStrength[%layer], 0) );
   
   MaterialEditorPropertiesWindow-->colorTintSwatch.color = (%material).diffuseColor[%layer];
   MaterialEditorPropertiesWindow-->specularColorSwatch.color = (%material).specular[%layer];     
   
   MaterialEditorPropertiesWindow-->glowMulTextEdit.setText((%material).glowMul[%layer]);
   MaterialEditorPropertiesWindow-->glowMulSlider.setValue((%material).glowMul[%layer]);
   MaterialEditorPropertiesWindow-->glowCheckbox.setValue((%material).glow[%layer]);
   MaterialEditorPropertiesWindow-->emissiveCheckbox.setValue((%material).emissive[%layer]);
   MaterialEditorPropertiesWindow-->parallaxTextEdit.setText((%material).parallaxScale[%layer]);
   MaterialEditorPropertiesWindow-->parallaxSlider.setValue((%material).parallaxScale[%layer]);

   MaterialEditorPropertiesWindow-->useAnisoCheckbox.setValue((%material).useAnisotropic[%layer]);
   MaterialEditorPropertiesWindow-->vertLitCheckbox.setValue((%material).vertLit[%layer]);
   MaterialEditorPropertiesWindow-->vertColorSwatch.color = (%material).vertColor[%layer];
   MaterialEditorPropertiesWindow-->subSurfaceCheckbox.setValue((%material).subSurface[%layer]);

   // Animation properties
   MaterialEditorPropertiesWindow-->RotationAnimation.setValue(0);
   MaterialEditorPropertiesWindow-->ScrollAnimation.setValue(0);
   MaterialEditorPropertiesWindow-->WaveAnimation.setValue(0);
   MaterialEditorPropertiesWindow-->ScaleAnimation.setValue(0);
   MaterialEditorPropertiesWindow-->SequenceAnimation.setValue(0);
   
   %flags = (%material).getAnimFlags(%layer);
   %wordCount = getWordCount( %flags );
   for(%i = 0; %i != %wordCount; %i++)
   {
      switch$(getWord( %flags, %i))
      {
         case "$rotate": MaterialEditorPropertiesWindow-->RotationAnimation.setValue(1);
         case "$scroll": MaterialEditorPropertiesWindow-->ScrollAnimation.setValue(1);
         case "$wave": MaterialEditorPropertiesWindow-->WaveAnimation.setValue(1);
         case "$scale": MaterialEditorPropertiesWindow-->ScaleAnimation.setValue(1);
         case "$sequence": MaterialEditorPropertiesWindow-->SequenceAnimation.setValue(1);
      }
   }
   
   MaterialEditorPropertiesWindow-->RotationTextEditU.setText( getWord((%material).rotPivotOffset[%layer], 0) );
   MaterialEditorPropertiesWindow-->RotationTextEditV.setText( getWord((%material).rotPivotOffset[%layer], 1) );
   MaterialEditorPropertiesWindow-->RotationSpeedTextEdit.setText( (%material).rotSpeed[%layer] );
   MaterialEditorPropertiesWindow-->RotationSliderU.setValue( getWord((%material).rotPivotOffset[%layer], 0) );
   MaterialEditorPropertiesWindow-->RotationSliderV.setValue( getWord((%material).rotPivotOffset[%layer], 1) );
   MaterialEditorPropertiesWindow-->RotationSpeedSlider.setValue( (%material).rotSpeed[%layer] );
   MaterialEditorPropertiesWindow-->RotationCrosshair.setPosition( 45*mAbs(getWord((%material).rotPivotOffset[%layer], 0))-2, 45*mAbs(getWord((%material).rotPivotOffset[%layer], 1))-2 );
   
   MaterialEditorPropertiesWindow-->ScrollTextEditU.setText( getWord((%material).scrollDir[%layer], 0) );
   MaterialEditorPropertiesWindow-->ScrollTextEditV.setText( getWord((%material).scrollDir[%layer], 1) );
   MaterialEditorPropertiesWindow-->ScrollSpeedTextEdit.setText( (%material).scrollSpeed[%layer] );
   MaterialEditorPropertiesWindow-->ScrollSliderU.setValue( getWord((%material).scrollDir[%layer], 0) );
   MaterialEditorPropertiesWindow-->ScrollSliderV.setValue( getWord((%material).scrollDir[%layer], 1) );
   MaterialEditorPropertiesWindow-->ScrollSpeedSlider.setValue( (%material).scrollSpeed[%layer] );
   MaterialEditorPropertiesWindow-->ScrollCrosshair.setPosition( -(23 * getWord((%material).scrollDir[%layer], 0))+20, -(23 * getWord((%material).scrollDir[%layer], 1))+20);
   
   %waveType = (%material).waveType[%layer];
   for( %radioButton = 0; %radioButton < MaterialEditorPropertiesWindow-->WaveButtonContainer.getCount(); %radioButton++ )
   {
      if( %waveType $= MaterialEditorPropertiesWindow-->WaveButtonContainer.getObject(%radioButton).waveType )
         MaterialEditorPropertiesWindow-->WaveButtonContainer.getObject(%radioButton).setStateOn(1);
   }
   
   MaterialEditorPropertiesWindow-->WaveTextEditAmp.setText( (%material).waveAmp[%layer] );
   MaterialEditorPropertiesWindow-->WaveTextEditFreq.setText( (%material).waveFreq[%layer] );
   MaterialEditorPropertiesWindow-->WaveSliderAmp.setValue( (%material).waveAmp[%layer] );
   MaterialEditorPropertiesWindow-->WaveSliderFreq.setValue( (%material).waveFreq[%layer] );

   %numFrames = mRound( 1 / (%material).sequenceSegmentSize[%layer] );

   MaterialEditorPropertiesWindow-->SequenceTextEditFPS.setText( (%material).sequenceFramePerSec[%layer] );
   MaterialEditorPropertiesWindow-->SequenceTextEditSSS.setText( %numFrames );
   MaterialEditorPropertiesWindow-->SequenceSliderFPS.setValue( (%material).sequenceFramePerSec[%layer] );
   MaterialEditorPropertiesWindow-->SequenceSliderSSS.setValue( %numFrames );
   
   // Accumulation
   MaterialEditorPropertiesWindow-->accuCheckbox.setValue((%material).accuEnabled[%layer]);
   
   MaterialEditorPropertiesWindow-->accuCheckbox.setValue((%material).accuEnabled[%layer]);
   
   %this.getRoughChan((%material).RoughnessChan[%layer]);
   %this.getAOChan((%material).AOChan[%layer]);
   %this.getMetalChan((%material).metalChan[%layer]);
   %this.preventUndo = false;
}

//=======================================
function MaterialEditorGui::getRoughChan(%this, %channel)
{
	%guiElement = roughChanBtn @ %channel;
	%guiElement.setStateOn(true);
}

function MaterialEditorGui::getAOChan(%this, %channel)
{
	%guiElement = AOChanBtn @ %channel;
	%guiElement.setStateOn(true);
}

function MaterialEditorGui::getMetalChan(%this, %channel)
{
	%guiElement = metalChanBtn @ %channel;
	%guiElement.setStateOn(true);
}

//=======================================
// Material Update Functionality

function MaterialEditorGui::changeLayer( %this, %layer )
{
   if( MaterialEditorGui.currentLayer == getWord(%layer, 1) )
      return;
      
   MaterialEditorGui.currentLayer = getWord(%layer, 1); 
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::updateActiveMaterial(%this, %propertyField, %value, %isSlider, %onMouseUp)
{
   MaterialEditorGui.setMaterialDirty();

   // Here is where we handle undo actions with slider controls. We want to be able to
   // undo every onMouseUp; so we overrite the same undo action when necessary in order
   // to achieve this desired effect.
   %last = Editor.getUndoManager().getUndoAction(Editor.getUndoManager().getUndoCount() - 1);
   if((%last != -1) && (%last.isSlider) && (!%last.onMouseUp))
   {
      %last.field = %propertyField;
      %last.isSlider = %isSlider;
      %last.onMouseUp = %onMouseUp;
      %last.newValue = %value;
   }
   else
   {
      %action = %this.createUndo(ActionUpdateActiveMaterial, "Update Active Material");
      %action.material = MaterialEditorGui.currentMaterial;
      %action.object = MaterialEditorGui.currentObject;
      %action.field = %propertyField;
      %action.isSlider = %isSlider;
      %action.onMouseUp = %onMouseUp;
      %action.newValue = %value;
      %action.oldValue = "\"" @ MaterialEditorGui.currentMaterial.getFieldValue(%propertyField) @ "\"";
      MaterialEditorGui.submitUndo( %action );
   }
   
   materialEd_previewMaterial.setFieldValue(%propertyField, %value);
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   
   if (MaterialEditorGui.livePreview == true)
   {
      MaterialEditorGui.currentMaterial.setFieldValue(%propertyField, %value);
      MaterialEditorGui.currentMaterial.flush();
      MaterialEditorGui.currentMaterial.reload();
   }
}

function MaterialEditorGui::updateActiveMaterialName(%this, %name)
{
   %action = %this.createUndo(ActionUpdateActiveMaterialName, "Update Active Material Name");
   %action.material =  MaterialEditorGui.currentMaterial;
   %action.object = MaterialEditorGui.currentObject;
   %action.oldName = MaterialEditorGui.currentMaterial.getName();
   %action.newName = %name;
   MaterialEditorGui.submitUndo( %action );

   MaterialEditorGui.currentMaterial.setName(%name);

   // Some objects (ConvexShape, DecalRoad etc) reference Materials by name => need
   // to find and update all these references so they don't break when we rename the
   // Material.
   MaterialEditorGui.updateMaterialReferences( getRootScene(), %action.oldName, %action.newName );
}

function MaterialEditorGui::updateMaterialReferences( %this, %obj, %oldName, %newName )
{
   if ( %obj.isMemberOfClass( "SimSet" ) )
   {
      // invoke on children
      %count = %obj.getCount();
      for ( %i = 0; %i < %count; %i++ )
         %this.updateMaterialReferences( %obj.getObject( %i ), %oldName, %newName );
   }
   else
   {
      %objChanged = false;

      // Change all material fields that use the old material name
      %count = %obj.getFieldCount();
      for( %i = 0; %i < %count; %i++ )
      {
         %fieldName = %obj.getField( %i );
         if ( ( %obj.getFieldType( %fieldName ) $= "TypeMaterialName" ) && ( %obj.getFieldValue( %fieldName ) $= %oldName ) )
         {
            %obj.setFieldValue(%fieldName, %newName);
            %objChanged = true;
         }
      }

      EWorldEditor.isDirty |= %objChanged;
      if ( %objChanged && %obj.isMethod( "postApply" ) )
         %obj.postApply();
   }
}

// Global Material Options

function MaterialEditorGui::updateReflectionType( %this, %type )
{
	if( %type $= "None" )
	{
	   MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(0);
	   //Reset material reflection settings on the preview materials
	   MaterialEditorGui.updateActiveMaterial( "cubeMap", "" );
	   MaterialEditorGui.updateActiveMaterial( "dynamicCubemap" , false );
	   MaterialEditorGui.updateActiveMaterial( "planarReflection", false );
	}
	else
	{
      if(%type $= "cubeMap")	 
      {
         MaterialEditorPropertiesWindow-->matEd_cubemapEditBtn.setVisible(1);
	      MaterialEditorGui.updateActiveMaterial( %type, materialEd_previewMaterial.cubemap );
      }
      else
      {
         MaterialEditorGui.updateActiveMaterial( %type, true );
      }
	}
}

// Per-Layer Material Options

// For update maps
// %action : 1 = change map
// %action : 0 = remove map

function MaterialEditorGui::updateTextureMap( %this, %type, %action )
{
   %layer = MaterialEditorGui.currentLayer;

   %this.updatingTextureType = %type;

   %bitmapCtrl = MaterialEditorPropertiesWindow.findObjectByInternalName( %type @ "MapDisplayBitmap", true );
   %textCtrl = MaterialEditorPropertiesWindow.findObjectByInternalName( %type @ "MapNameText", true );

   if( %action )
   {
      AssetBrowser.showDialog("ImageAsset", %this@".doUpdateTextureMap");
   }
   else
   {
      %textCtrl.setText("None");
      %bitmapCtrl.setBitmap($MaterialEditor::emptyMaterialImage);
      MaterialEditorGui.updateActiveMaterial(%type @ "Map[" @ %layer @ "]","");
      MaterialEditorGui.updateActiveMaterial(%type @ "MapAsset[" @ %layer @ "]","");
   }
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::doUpdateTextureMap( %this, %assetId )
{
   if(%assetId !$= "")
   {
      %layer = MaterialEditorGui.currentLayer;
   
      %type = %this.updatingTextureType;
      
      %bitmapCtrl = MaterialEditorPropertiesWindow.findObjectByInternalName( %type @ "MapDisplayBitmap", true );
      %textCtrl = MaterialEditorPropertiesWindow.findObjectByInternalName( %type @ "MapNameText", true );
   
      %texture = getAssetPreviewImage(%assetId);
   
      if( %texture !$= "" && %texture !$= $MaterialEditor::emptyMaterialImage)
      {         
         %bitmapCtrl.setBitmap(%texture);
      
         %bitmap = %bitmapCtrl.getBitmap();
         %bitmap = strreplace(%bitmap,"tools/materialEditor/scripts/","");
         %bitmapCtrl.setBitmap(%bitmap);
         %textCtrl.setText(%assetId);
         MaterialEditorGui.updateActiveMaterial(%type @ "Map[" @ %layer @ "]","");
         MaterialEditorGui.updateActiveMaterial(%type @ "MapAsset[" @ %layer @ "]", %assetId);	
      }
   }
   
   %this.updatingTextureType = "";
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::updateDetailScale(%this,%newScale)
{
   %layer = MaterialEditorGui.currentLayer;
   
   %detailScale = %newScale SPC %newScale;
   MaterialEditorGui.updateActiveMaterial("detailScale[" @ %layer @ "]", %detailScale);
   }
   
function MaterialEditorGui::updateDetailNormalStrength(%this,%newStrength)
{
   %layer = MaterialEditorGui.currentLayer;
   
   %detailStrength = %newStrength;
   MaterialEditorGui.updateActiveMaterial("detailNormalMapStrength[" @ %layer @ "]", %detailStrength);
}

function MaterialEditorGui::updateRotationOffset(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
	%X = MaterialEditorPropertiesWindow-->RotationTextEditU.getText();
	%Y = MaterialEditorPropertiesWindow-->RotationTextEditV.getText();
	MaterialEditorPropertiesWindow-->RotationCrosshair.setPosition(45*mAbs(%X)-2, 45*mAbs(%Y)-2);
	
	MaterialEditorGui.updateActiveMaterial("rotPivotOffset[" @ %layer @ "]", %X SPC %Y,%isSlider,%onMouseUp);
}

function MaterialEditorGui::updateRotationSpeed(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
   %speed = MaterialEditorPropertiesWindow-->RotationSpeedTextEdit.getText();
   MaterialEditorGui.updateActiveMaterial("rotSpeed[" @ %layer @ "]",%speed,%isSlider,%onMouseUp);
}

function MaterialEditorGui::updateScrollOffset(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
	%X = MaterialEditorPropertiesWindow-->ScrollTextEditU.getText();
	%Y = MaterialEditorPropertiesWindow-->ScrollTextEditV.getText();
	MaterialEditorPropertiesWindow-->ScrollCrosshair.setPosition( -(23 * %X)+20, -(23 * %Y)+20);
	
	MaterialEditorGui.updateActiveMaterial("scrollDir[" @ %layer @ "]",%X SPC %Y,%isSlider,%onMouseUp);	
}

function MaterialEditorGui::updateScrollSpeed(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
   %speed = MaterialEditorPropertiesWindow-->ScrollSpeedTextEdit.getText();
   MaterialEditorGui.updateActiveMaterial("scrollSpeed[" @ %layer @ "]",%speed,%isSlider,%onMouseUp);
}

function MaterialEditorGui::updateWaveType(%this)
{
   for( %radioButton = 0; %radioButton < MaterialEditorPropertiesWindow-->WaveButtonContainer.getCount(); %radioButton++ )
   {
      if( MaterialEditorPropertiesWindow-->WaveButtonContainer.getObject(%radioButton).getValue() == 1 )
         %type = MaterialEditorPropertiesWindow-->WaveButtonContainer.getObject(%radioButton).waveType;
   }
   
   %layer = MaterialEditorGui.currentLayer;
   MaterialEditorGui.updateActiveMaterial("waveType[" @ %layer @ "]", %type);
}

function MaterialEditorGui::updateWaveAmp(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
   %amp = MaterialEditorPropertiesWindow-->WaveTextEditAmp.getText();
   MaterialEditorGui.updateActiveMaterial("waveAmp[" @ %layer @ "]", %amp, %isSlider, %onMouseUp);
}

function MaterialEditorGui::updateWaveFreq(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
   %freq = MaterialEditorPropertiesWindow-->WaveTextEditFreq.getText();
   MaterialEditorGui.updateActiveMaterial("waveFreq[" @ %layer @ "]", %freq, %isSlider, %onMouseUp);
}

function MaterialEditorGui::updateSequenceFPS(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
	%fps = MaterialEditorPropertiesWindow-->SequenceTextEditFPS.getText();
	MaterialEditorGui.updateActiveMaterial("sequenceFramePerSec[" @ %layer @ "]", %fps, %isSlider, %onMouseUp);	
}

function MaterialEditorGui::updateSequenceSSS(%this, %isSlider, %onMouseUp)
{
   %layer = MaterialEditorGui.currentLayer;
   %sss = 1 / MaterialEditorPropertiesWindow-->SequenceTextEditSSS.getText();
   MaterialEditorGui.updateActiveMaterial("sequenceSegmentSize[" @ %layer @ "]", %sss, %isSlider, %onMouseUp);
}

function MaterialEditorGui::updateAnimationFlags(%this)
{
   MaterialEditorGui.setMaterialDirty();
   %single = true;
   %flags = "";

   if(MaterialEditorPropertiesWindow-->RotationAnimation.getValue() == true)
   {
      if(%single == true)
	      %flags = %flags @ "$Rotate";
	   else
		  %flags = %flags @ " | $Rotate";
		  
      %single = false;
   }
   if(MaterialEditorPropertiesWindow-->ScrollAnimation.getValue() == true)
   {
      if(%single == true)
	      %flags = %flags @ "$Scroll";
	   else
		  %flags = %flags @ " | $Scroll";
		  
      %single = false;
   }
   if(MaterialEditorPropertiesWindow-->WaveAnimation.getValue() == true)
   {
      if(%single == true)
	      %flags = %flags @ "$Wave";
	   else
		  %flags = %flags @ " | $Wave";
		  
      %single = false;
   }
   if(MaterialEditorPropertiesWindow-->ScaleAnimation.getValue() == true)
   {
      if(%single == true)
	      %flags = %flags @ "$Scale";
	   else
		  %flags = %flags @ " | $Scale";
		  
      %single = false;
   }
   if(MaterialEditorPropertiesWindow-->SequenceAnimation.getValue() == true)
   {
      if(%single == true)
	      %flags = %flags @ "$Sequence";
	   else
		  %flags = %flags @ " | $Sequence";
		  
      %single = false;
   }
   
   if(%flags $= "")
      %flags = "\"\"";
      
   %action = %this.createUndo(ActionUpdateActiveMaterialAnimationFlags, "Update Active Material");
   %action.material = MaterialEditorGui.currentMaterial;
   %action.object = MaterialEditorGui.currentObject;
   %action.layer = MaterialEditorGui.currentLayer; 
      
   %action.newValue = %flags;
   
   %oldFlags = MaterialEditorGui.currentMaterial.getAnimFlags(MaterialEditorGui.currentLayer);
   if(%oldFlags $= "")
      %oldFlags = "\"\"";
      
   %action.oldValue = %oldFlags;
   MaterialEditorGui.submitUndo( %action );
   
   materialEd_previewMaterial.setAnimFlags(MaterialEditorGui.currentLayer, %flags);
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   
   if (MaterialEditorGui.livePreview == true)
   {
      MaterialEditorGui.currentMaterial.setAnimFlags(MaterialEditorGui.currentLayer, %flags);
      MaterialEditorGui.currentMaterial.flush();
      MaterialEditorGui.currentMaterial.reload();
   }
}

//==============================================================================
// Color Picker Helpers - They are all using colorPicker.ed.gui in order to function
// These functions are mainly passed callbacks from getColorI/getColorF callbacks

function MaterialEditorGui::syncGuiColor(%this, %guiCtrl, %propname, %color)
{
   %layer = MaterialEditorGui.currentLayer;

   %r = getWord(%color,0);
   %g = getWord(%color,1);
   %b = getWord(%color,2);
   %a = getWord(%color,3);

   %colorSwatch = (%r SPC %g SPC %b SPC %a);
   %color = %r SPC %g SPC %b SPC %a;

   %guiCtrl.color = %colorSwatch;
	MaterialEditorGui.updateActiveMaterial(%propName, %color);
}

//These two functions are focused on object/layer specific functionality
function MaterialEditorGui::updateColorMultiply(%this,%color)
{
   %propName = "diffuseColor[" @ MaterialEditorGui.currentLayer @ "]";
   %this.syncGuiColor(MaterialEditorPropertiesWindow-->colorTintSwatch, %propName, %color);
}

function MaterialEditorGui::updateSpecular(%this, %color)
{
   %propName = "specular[" @ MaterialEditorGui.currentLayer @ "]";
   %this.syncGuiColor(MaterialEditorPropertiesWindow-->specularColorSwatch, %propName, %color);
}

function MaterialEditorGui::updateSubSurfaceColor(%this, %color)
{
   %propName = "subSurfaceColor[" @ MaterialEditorGui.currentLayer @ "]";
   %this.syncGuiColor(MaterialEditorPropertiesWindow-->subSurfaceColorSwatch, %propName, %color);
}

function MaterialEditorGui::updateEffectColor0(%this, %color)
{
   %this.syncGuiColor(MaterialEditorPropertiesWindow-->effectColor0Swatch, "effectColor[0]", %color);
}

function MaterialEditorGui::updateEffectColor1(%this, %color)
{
   %this.syncGuiColor(MaterialEditorPropertiesWindow-->effectColor1Swatch, "effectColor[1]", %color);
}

function MaterialEditorGui::updateBehaviorSound(%this, %type, %sound)
{
   %defaultId = -1;
   %customName = "";

   switch$ (%sound)
   {
      case "<Soft>":    %defaultId = 0;
      case "<Hard>":    %defaultId = 1;
      case "<Metal>":   %defaultId = 2;
      case "<Snow>":    %defaultId = 3;
      default:          %customName = %sound;
   }

   %this.updateActiveMaterial(%type @ "SoundId", %defaultId);
   %this.updateActiveMaterial("custom" @ %type @ "SoundAsset", %customName);
}

function MaterialEditorGui::updateSoundPopup(%this, %type, %defaultId, %customName)
{
   %ctrl = MaterialEditorPropertiesWindow.findObjectByInternalName( %type @ "SoundPopup", true );

   switch (%defaultId)
   {
      case 0:        %name = "<Soft>";
      case 1:        %name = "<Hard>";
      case 2:        %name = "<Metal>";
      case 3:        %name = "<Snow>";
      default:
         if (%customName $= "")
            %name = "<None>";
         else
            %name = %customName;
   }

   %r = %ctrl.findText(%name);
   if (%r != -1)
      %ctrl.setSelected(%r, false);
   else
      %ctrl.setText(%name);
}

//These two functions are focused on environment specific functionality
function MaterialEditorGui::updateLightColor(%this, %color)
{
   matEd_previewObjectView.setLightColor(%color);
   matEd_lightColorPicker.color = %color;
}

function MaterialEditorGui::updatePreviewBackground(%this,%color)
{   
   matEd_previewBackground.color = %color;
   MaterialPreviewBackgroundPicker.color = %color;
}

function MaterialEditorGui::updateAmbientColor(%this,%color)
{
   matEd_previewObjectView.setAmbientLightColor(%color);
   matEd_ambientLightColorPicker.color = %color;
}

//==============================================================================
// Commands for the Cubemap Editor

function MaterialEditorGui::selectCubemap(%this)
{
   %cubemap = MaterialEditorGui.currentCubemap;
   if(!isObject(%cubemap))
      return;
   
   MaterialEditorGui.updateActiveMaterial( "cubemap", %cubemap.name );
   MaterialEditorGui.hideCubemapEditor();
}

function MaterialEditorGui::cancelCubemap(%this)
{
   %cubemap = MaterialEditorGui.currentCubemap;
   
   %idx = matEd_cubemapEd_availableCubemapList.findItemText( %cubemap.getName() );
   matEd_cubemapEd_availableCubemapList.setItemText( %idx, notDirtyCubemap.originalName );      
   %cubemap.setName( notDirtyCubemap.originalName );
   
   MaterialEditorGui.copyCubemaps( notDirtyCubemap, %cubemap );
   MaterialEditorGui.copyCubemaps( notDirtyCubemap, matEdCubeMapPreviewMat);
   
   %cubemap.updateFaces();
   matEdCubeMapPreviewMat.updateFaces();
}

function MaterialEditorGui::showCubemapEditor(%this)
{
   if (matEd_cubemapEditor.isVisible())
      return;

   MaterialEditorGui.currentCubemap = "";
   
   matEd_cubemapEditor.setVisible(1);
   new PersistenceManager(matEd_cubemapEdPerMan);
   MaterialEditorGui.setCubemapNotDirty();
   
   for( %i = 0; %i < RootGroup.getCount(); %i++ )
   {
      if( RootGroup.getObject(%i).getClassName()!$= "CubemapData" )
         continue;
         
      for( %k = 0; %k < UnlistedCubemaps.count(); %k++ )
      {
         %unlistedFound = 0;
         if( UnlistedCubemaps.getValue(%k) $= RootGroup.getObject(%i).name )
         {
            %unlistedFound = 1;
            break;
         }
      }
   
      if( %unlistedFound )
         continue;
      
      matEd_cubemapEd_availableCubemapList.addItem( RootGroup.getObject(%i).name );
   }
   
   singleton CubemapData(notDirtyCubemap);
   
   // if there was no cubemap, pick the first, select, and bail, these are going to take
   // care of themselves in the selected function
   if( !isObject( MaterialEditorGui.currentMaterial.cubemap ) )
   {
      if( matEd_cubemapEd_availableCubemapList.getItemCount() > 0 )
      {
         matEd_cubemapEd_availableCubemapList.setSelected(0, true);
         return;
      }
      else 
      {  
         // if there are no cubemaps, then create one, select, and bail
         %cubemap = MaterialEditorGui.createNewCubemap();
         matEd_cubemapEd_availableCubemapList.addItem( %cubemap.name );
         matEd_cubemapEd_availableCubemapList.setSelected(0, true);
         return;
      }
   }

   // do not directly change activeMat!
   MaterialEditorGui.currentCubemap = MaterialEditorGui.currentMaterial.cubemap.getId();
   %cubemap = MaterialEditorGui.currentCubemap;
   
   notDirtyCubemap.originalName = %cubemap.getName();
   MaterialEditorGui.copyCubemaps( %cubemap, notDirtyCubemap);
   MaterialEditorGui.copyCubemaps( %cubemap, matEdCubeMapPreviewMat);
   MaterialEditorGui.syncCubemap( %cubemap );
}

function MaterialEditorGui::hideCubemapEditor(%this,%cancel)
{
   if(%cancel)
      MaterialEditorGui.cancelCubemap();
      
   matEd_cubemapEd_availableCubemapList.clearItems();
   matEd_cubemapEdPerMan.delete();
   matEd_cubemapEditor.setVisible(0);
}

// create category and update current material if there is one
function MaterialEditorGui::addCubemap( %this,%cubemapName )
{
   if( %cubemapName $= "" )
   {
      toolsMessageBoxOK( "Error", "Can not create a cubemap without a valid name.");
      return;
   }
   
   for(%i = 0; %i < RootGroup.getCount(); %i++)
   {
      if( %cubemapName $= RootGroup.getObject(%i).getName() )
      {
         toolsMessageBoxOK( "Error", "There is already an object with the same name.");
         return;
      }
   }

   // Create and select a new cubemap
   %cubemap = MaterialEditorGui.createNewCubemap( %cubemapName );
   %idx = matEd_cubemapEd_availableCubemapList.addItem( %cubemap.name );
   matEd_cubemapEd_availableCubemapList.setSelected( %idx, true );

   // material category text field to blank
   matEd_addCubemapWindow-->cubemapName.setText("");
}

function MaterialEditorGui::createNewCubemap( %this, %cubemap )
{
   if( %cubemap $= "" )
   {
      for(%i = 0; ; %i++)
      {
         %cubemap = "newCubemap_" @ %i;
         if( !isObject(%cubemap) )
            break;
      }
   }
   
   new CubemapData(%cubemap) 
   {
      cubeMapFaceAsset[0] = "ToolsModule:cube_xNeg_image";
      cubeMapFaceAsset[1] = "ToolsModule:cube_xPos_image";
      cubeMapFaceAsset[2] = "ToolsModule:cube_zNeg_image";
      cubeMapFaceAsset[3] = "ToolsModule:cube_zPos_image";
      cubeMapFaceAsset[4] = "ToolsModule:cube_yNeg_image";
      cubeMapFaceAsset[5] = "ToolsModule:cube_yPos_image";

      parentGroup = RootGroup;
   };

   matEd_cubemapEdPerMan.setDirty( %cubemap, "art/materials." @ $TorqueScriptFileExtension );
   matEd_cubemapEdPerMan.saveDirty();

   return %cubemap;
}

function MaterialEditorGui::setCubemapDirty(%this)
{ 
   %propertyText = "Create Cubemap *";
   matEd_cubemapEditor.text = %propertyText;
   matEd_cubemapEditor.dirty = true;
   matEd_cubemapEditor-->saveCubemap.setActive(true);

   %cubemap = MaterialEditorGui.currentCubemap;

   // materials created in the materail selector are given that as its filename, so we run another check
   if( MaterialEditorGui.isMatEditorMaterial( %cubemap ) )
      matEd_cubemapEdPerMan.setDirty(%cubemap, "art/materials." @ $TorqueScriptFileExtension);
   else
      matEd_cubemapEdPerMan.setDirty(%cubemap);
}

function MaterialEditorGui::setCubemapNotDirty(%this)
{
   %propertyText= strreplace("Create Cubemap" , "*" , "");
   matEd_cubemapEditor.text = %propertyText;
   matEd_cubemapEditor.dirty = false;
   matEd_cubemapEditor-->saveCubemap.setActive(false);

   %cubemap = MaterialEditorGui.currentCubemap;
   matEd_cubemapEdPerMan.removeDirty(%cubemap);
}

function MaterialEditorGui::showDeleteCubemapDialog(%this)
{
   %idx = matEd_cubemapEd_availableCubemapList.getSelectedItem();
   %cubemap = matEd_cubemapEd_availableCubemapList.getItemText( %idx );
   %cubemap = %cubemap.getId();
   
   if( %cubemap == -1 || !isObject(%cubemap) )
      return;
      
   if( isObject( %cubemap ) )
   {
      toolsMessageBoxYesNoCancel("Delete Cubemap?", 
         "Are you sure you want to delete<br><br>" @ %cubemap.getName() @ "<br><br> Cubemap deletion won't take affect until the engine is quit.", 
         "MaterialEditorGui.deleteCubemap( " @ %cubemap @ ", " @ %idx @ " );", 
         "", 
         "" );
   }
}

function MaterialEditorGui::deleteCubemap( %this, %cubemap, %idx )
{
   matEd_cubemapEd_availableCubemapList.deleteItem( %idx );
   
   UnlistedCubemaps.add( "unlistedCubemaps", %cubemap.getName() );
      
   if( !MaterialEditorGui.isMatEditorMaterial( %cubemap ) )
   {
      matEd_cubemapEdPerMan.removeDirty( %cubemap );
      matEd_cubemapEdPerMan.removeObjectFromFile( %cubemap );
   }

   if( matEd_cubemapEd_availableCubemapList.getItemCount() > 0 )
   {
      matEd_cubemapEd_availableCubemapList.setSelected(0, true);
   }
   else 
   {  
      // if there are no cubemaps, then create one, select, and bail
      %cubemap = MaterialEditorGui.createNewCubemap();
      matEd_cubemapEd_availableCubemapList.addItem( %cubemap.getName() );
      matEd_cubemapEd_availableCubemapList.setSelected(0, true);
   }
}

function matEd_cubemapEd_availableCubemapList::onSelect( %this, %id, %cubemap )
{
   %cubemap = %cubemap.getId();
   if( MaterialEditorGui.currentCubemap $= %cubemap )
      return;
   
   if( matEd_cubemapEditor.dirty )
   {         
      %savedCubemap = MaterialEditorGui.currentCubemap;
      toolsMessageBoxYesNoCancel("Save Existing Cubemap?", 
      "Do you want to save changes to <br><br>" @ %savedCubemap.getName(), 
      "MaterialEditorGui.saveCubemap(" @ true @ ");", 
      "MaterialEditorGui.saveCubemapDialogDontSave(" @ %cubemap @ ");",
      "MaterialEditorGui.saveCubemapDialogCancel();" );
   }
   else
      MaterialEditorGui.changeCubemap( %cubemap );
}

function MaterialEditorGui::showSaveCubemapDialog( %this )
{
   %cubemap = MaterialEditorGui.currentCubemap;
   if( !isObject(%cubemap) )
      return;
      
   toolsMessageBoxYesNoCancel("Save Cubemap?", 
      "Do you want to save changes to <br><br>" @ %cubemap.getName(), 
      "MaterialEditorGui.saveCubemap( " @ %cubemap @ " );", 
      "", 
      "" );
}

function MaterialEditorGui::saveCubemap( %this, %cubemap )
{   
   notDirtyCubemap.originalName = %cubemap.getName();
   MaterialEditorGui.copyCubemaps( %cubemap, notDirtyCubemap );
   MaterialEditorGui.copyCubemaps( %cubemap, matEdCubeMapPreviewMat);

   matEd_cubemapEdPerMan.saveDirty(); 

   MaterialEditorGui.setCubemapNotDirty();
}

function MaterialEditorGui::saveCubemapDialogDontSave( %this, %newCubemap)
{  
   //deal with old cubemap first
   %oldCubemap = MaterialEditorGui.currentCubemap;
   
   %idx = matEd_cubemapEd_availableCubemapList.findItemText( %oldCubemap.getName() );
   matEd_cubemapEd_availableCubemapList.setItemText( %idx, notDirtyCubemap.originalName );      
   %oldCubemap.setName( notDirtyCubemap.originalName );
   
   MaterialEditorGui.copyCubemaps( notDirtyCubemap, %oldCubemap);
   MaterialEditorGui.copyCubemaps( notDirtyCubemap, matEdCubeMapPreviewMat);
   MaterialEditorGui.syncCubemap( %oldCubemap ); 
   
   MaterialEditorGui.changeCubemap( %newCubemap );
}

function MaterialEditorGui::saveCubemapDialogCancel( %this )
{ 
   %cubemap = MaterialEditorGui.currentCubemap;
   %idx = matEd_cubemapEd_availableCubemapList.findItemText( %cubemap.getName() );
   matEd_cubemapEd_availableCubemapList.clearSelection();
   matEd_cubemapEd_availableCubemapList.setSelected( %idx, true );
}

function MaterialEditorGui::changeCubemap( %this, %cubemap )
{  
   MaterialEditorGui.setCubemapNotDirty();
   MaterialEditorGui.currentCubemap = %cubemap;
   
   notDirtyCubemap.originalName = %cubemap.getName();
   MaterialEditorGui.copyCubemaps( %cubemap, notDirtyCubemap);
   MaterialEditorGui.copyCubemaps( %cubemap, matEdCubeMapPreviewMat);
   MaterialEditorGui.syncCubemap( %cubemap );  
}

function MaterialEditorGui::editCubemapImage( %this, %face )
{   
   MaterialEditorGui.setCubemapDirty();
   
   %cubemap = MaterialEditorGui.currentCubemap;
   %bitmap = MaterialEditorGui.openFile("texture");
   if( %bitmap !$= "" && %bitmap !$= "tools/materialEditor/gui/cubemapBtnBorder" )
   {
      %cubemap.cubeFace[%face] = %bitmap;
      MaterialEditorGui.copyCubemaps( %cubemap, matEdCubeMapPreviewMat);
      MaterialEditorGui.syncCubemap( %cubemap );
   }
}

function MaterialEditorGui::editCubemapName( %this, %newName )
{   
   MaterialEditorGui.setCubemapDirty();
   
   %cubemap = MaterialEditorGui.currentCubemap;
   
   %idx = matEd_cubemapEd_availableCubemapList.findItemText( %cubemap.getName() );
   matEd_cubemapEd_availableCubemapList.setItemText( %idx, %newName );   
   %cubemap.setName(%newName);
   
   MaterialEditorGui.syncCubemap( %cubemap );
}

function MaterialEditorGui::syncCubemap( %this, %cubemap )
{
   %xpos = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[0]);
   if( %xpos !$= "" )
      matEd_cubemapEd_XPos.setBitmap( %xpos );
   
   %xneg = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[1]);
   if( %xneg !$= "" )
      matEd_cubemapEd_XNeg.setBitmap( %xneg );      
   
   %yneg = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[2]);
   if( %yneg !$= "" )
      matEd_cubemapEd_YNeG.setBitmap( %yneg );
   
   %ypos = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[3]);
   if( %ypos !$= "" )
      matEd_cubemapEd_YPos.setBitmap( %ypos );
   
   %zpos = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[4]);
   if( %zpos !$= "" )
      matEd_cubemapEd_ZPos.setBitmap( %zpos );
   
   %zneg = MaterialEditorGui.searchForTexture(%cubemap.getName(), %cubemap.cubeFace[5]);
   if( %zneg !$= "" )
      matEd_cubemapEd_ZNeg.setBitmap( %zneg );
   
   matEd_cubemapEd_activeCubemapNameTxt.setText(%cubemap.getName());
   
   %cubemap.updateFaces();
   matEdCubeMapPreviewMat.updateFaces();
}

function MaterialEditorGui::copyCubemaps( %this, %copyFrom, %copyTo)
{
   %copyTo.cubeFace[0] = %copyFrom.cubeFace[0];
   %copyTo.cubeFace[1] = %copyFrom.cubeFace[1];
   %copyTo.cubeFace[2] = %copyFrom.cubeFace[2];
   %copyTo.cubeFace[3] = %copyFrom.cubeFace[3];
   %copyTo.cubeFace[4] = %copyFrom.cubeFace[4];
   %copyTo.cubeFace[5] = %copyFrom.cubeFace[5];
}


//==============================================================================
// showSaveDialog logic

function MaterialEditorGui::showSaveDialog( %this, %toMaterial )
{
   toolsMessageBoxYesNoCancel("Save Material?", 
      "The material " @ MaterialEditorGui.currentMaterial.getName() @ " has unsaved changes. <br>Do you want to save?", 
      "MaterialEditorGui.saveDialogSave(" @ %toMaterial @ ");", 
      "MaterialEditorGui.saveDialogDontSave(" @ %toMaterial @ ");", 
      "MaterialEditorGui.saveDialogCancel();" );
}

function MaterialEditorGui::showMaterialChangeSaveDialog( %this, %toMaterial )
{
   %fromMaterial = MaterialEditorGui.currentMaterial;
   
   toolsMessageBoxYesNoCancel("Save Material?", 
      "The material " @ %fromMaterial.getName() @ " has unsaved changes. <br>Do you want to save before changing the material?", 
      "MaterialEditorGui.saveDialogSave(\"" @ %toMaterial @ "\"); MaterialEditorGui.changeMaterial(" @ %fromMaterial @ ", \"" @ %toMaterial @ "\");", 
      "MaterialEditorGui.saveDialogDontSave(\"" @ %toMaterial @ "\"); MaterialEditorGui.changeMaterial(" @ %fromMaterial @ ", \"" @ %toMaterial @ "\");", 
      "MaterialEditorGui.saveDialogCancel();" );
}

/*
function MaterialEditorGui::showCreateNewMaterialSaveDialog( %this, %toMaterial )
{
   toolsMessageBoxYesNoCancel("Save Material?", 
      "The material " @ MaterialEditorGui.currentMaterial.getName() @ " has unsaved changes. <br>Do you want to save before changing the material?", 
      "MaterialEditorGui.save(); MaterialEditorGui.createNewMaterial(" @ %toMaterial @ ");", 
      "MaterialEditorGui.saveDialogDontSave(" @ %toMaterial @ "); MaterialEditorGui.changeMaterial(" @ %toMaterial @ ");", 
      "MaterialEditorGui.saveDialogCancel();" );
}
*/

function MaterialEditorGui::saveDialogCancel( %this )
{
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::saveDialogDontSave( %this, %material )
{
   MaterialEditorGui.currentMaterial.setName( %this.originalName );
   
   //restore to defaults
   MaterialEditorGui.copyMaterials( notDirtyMaterial, MaterialEditorGui.currentMaterial );
   MaterialEditorGui.copyMaterials( notDirtyMaterial, materialEd_previewMaterial );
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
   
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   MaterialEditorGui.currentMaterial.flush();
   MaterialEditorGui.currentMaterial.reload();
   
   MaterialEditorGui.setMaterialNotDirty();
   
   if(AssetDatabase.isDeclaredAsset(%material))
   {
      MaterialEditorGui.currentMaterialAsset = %material;
      %material = AssetDatabase.acquireAsset(%material).materialDefinitionName;
   }
   
   MaterialEditorGui.setActiveMaterial( %material );
}

function MaterialEditorGui::saveDialogSave( %this, %material )
{
   if(AssetDatabase.isDeclaredAsset(%material))
   {
      MaterialEditorGui.currentMaterialAsset = %material;
      %material = AssetDatabase.acquireAsset(%material).materialDefinitionName;
   }
      
   MaterialEditorGui.save();
   MaterialEditorGui.setActiveMaterial( %material );
}

function MaterialEditorGui::save( %this )
{
   if( MaterialEditorGui.currentMaterial.getName() $= "" )
   {
      toolsMessageBoxOK("Cannot perform operation", "Saved materials cannot be named \"\". A name must be given before operation is performed" );
      return;   
   }
   
   // Update the live object regardless in this case
   MaterialEditorGui.updateLivePreview(true);
   
   %currentMaterial = MaterialEditorGui.currentMaterial;
   if( %currentMaterial == -1 )
   {
      toolsMessageBoxOK("Cannot perform operation", "Could not locate material" );
      return;
   }

   // Specifically for materials autogenerated from shapes.
   if( %currentMaterial.isAutoGenerated() ) 
      %currentMaterial.setAutoGenerated( false ); 
     
   if(MaterialEditorGui.currentMaterialAsset !$= "")
   {
      echo("Attempting to save material: " @ MaterialEditorGui.currentMaterialAsset);
      MaterialEditorGui.copyMaterials( materialEd_previewMaterial, notDirtyMaterial );
      
      %assetDef = AssetDatabase.acquireAsset(MaterialEditorGui.currentMaterialAsset);
      %didEmbed = false;
      %matScriptFile = %assetDef.getScriptPath();
      if(%matScriptFile !$= "")
      {
         //lets up-convert to embedded
         %assetDef.add(%assetDef.materialDefinitionName);
         %assetDef.scriptFile = "";
         %didEmbed = true;
      }
      
      //write it out
      if(%assetDef.saveAsset())
      {
         if(%didEmbed)
         {
            fileDelete(%matScriptFile); //cleanup the old definition file  
         }
      }
   }
   else
   {
      // Save the material using the persistence manager
      matEd_PersistMan.saveDirty();   
   }
   
   // Clean up the Material Editor
   MaterialEditorGui.copyMaterials( materialEd_previewMaterial, notDirtyMaterial );
   MaterialEditorGui.setMaterialNotDirty();
}

//==============================================================================
// Create New and Delete Material

function MaterialEditorGui::createNewMaterial( %this )
{
   AssetBrowser.setupCreateNewAsset("MaterialAsset", AssetBrowser.selectedModule, "MaterialEditorGui.onCreateNewMaterialAsset");
}

function MaterialEditorGui::onCreateNewMaterialAsset(%this, %newAssetId)
{
   //get the new asset definition
   %assetDef = AssetDatabase.acquireAsset(%newAssetId);
   if(isObject(%assetDef))
      AssetBrowser.editMaterialAsset(%assetDef);
}

function MaterialEditorGui::deleteMaterial( %this )
{
   %action = %this.createUndo(ActionDeleteMaterial, "Delete Material");
   %action.object = MaterialEditorGui.currentObject;
   %action.currentMode = MaterialEditorGui.currentMode;
   
   /*
   if( MaterialEditorGui.currentMode $= "Mesh" )
   {
      %materialTarget = SubMaterialSelector.text;
      %action.materialTarget = %materialTarget;   
      
      //create the stub material
      %toMaterial = getUniqueName( "newMaterial" );
      new Material(%toMaterial) 
      {
         diffuseMap[0] = "core/rendering/images/warnmat";
         mapTo = "unmapped_mat";
         parentGroup = RootGroup;
      };
         
      %action.toMaterial = %toMaterial.getId();   
      %action.fromMaterial = MaterialEditorGui.currentMaterial;
      %action.fromMaterialOldFname = MaterialEditorGui.currentMaterial.getFilename();
   }
   else
   {
      // Grab first material we see; if theres not one, create one
      %toMaterial = MaterialSet.getObject(0);
      if( !isObject( %toMaterial ) )
      {
         %toMaterial = getUniqueName( "newMaterial" );
         new Material(%toMaterial) 
         {
            diffuseMap[0] = "core/rendering/images/warnmat";
            mapTo = "unmapped_mat";
            parentGroup = RootGroup;
         };    
      }
   
      %action.toMaterial = %toMaterial.getId();
      %action.fromMaterial = MaterialEditorGui.currentMaterial;
   }
   */
   
   // Grab first material we see; if theres not one, create one
   %newMaterial = getUniqueName( "newMaterial" );
   new Material(%newMaterial) 
   {
      diffuseMap[0] = "core/rendering/images/warnmat";
      mapTo = "unmapped_mat";
      parentGroup = RootGroup;
   };

   // Setup vars
   %action.newMaterial = %newMaterial.getId();
   %action.oldMaterial = MaterialEditorGui.currentMaterial;
   %action.oldMaterialFname = MaterialEditorGui.currentMaterial.getFilename();
   
   // Submit undo
   MaterialEditorGui.submitUndo( %action );
   
   // Delete the material from file
   if( !MaterialEditorGui.isMatEditorMaterial( MaterialEditorGui.currentMaterial ) )
   {
      matEd_PersistMan.removeObjectFromFile(MaterialEditorGui.currentMaterial);
      matEd_PersistMan.removeDirty(MaterialEditorGui.currentMaterial);
   }
   
   // Delete the material as seen through the material selector.
   UnlistedMaterials.add( "unlistedMaterials", MaterialEditorGui.currentMaterial.getName() );
   
   // Loadup another material
   MaterialEditorGui.currentObject = "";
   MaterialEditorGui.setMode();
   MaterialEditorGui.prepareActiveMaterial( %newMaterial.getId(), true );
}

//==============================================================================
// Clear and Refresh Material

function MaterialEditorGui::clearMaterial(%this)
{
   %action = %this.createUndo(ActionClearMaterial, "Clear Material");
   %action.material = MaterialEditorGui.currentMaterial;
   %action.object = MaterialEditorGui.currentObject;
   
   pushInstantGroup();
   %action.oldMaterial = new Material();
   %action.newMaterial = new Material();   
   popInstantGroup();
   
   MaterialEditorGui.submitUndo( %action );
   
   MaterialEditorGui.copyMaterials( MaterialEditorGui.currentMaterial, %action.oldMaterial );
   
   %tempMat = new Material()
                  {
                     name = "tempMaterial";
                     mapTo = "unmapped_mat";
                     parentGroup = RootGroup;
                  };
   
   MaterialEditorGui.copyMaterials( %tempMat, materialEd_previewMaterial );
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
      
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   
   if (MaterialEditorGui.livePreview == true)
   {
      MaterialEditorGui.copyMaterials( %tempMat, MaterialEditorGui.currentMaterial );
      MaterialEditorGui.currentMaterial.flush();
      MaterialEditorGui.currentMaterial.reload();
   }
   
   MaterialEditorGui.setMaterialDirty();
   
   %tempMat.delete();
}

function MaterialEditorGui::refreshMaterial(%this)
{
   %action = %this.createUndo(ActionRefreshMaterial, "Refresh Material");
   %action.material = MaterialEditorGui.currentMaterial;
   %action.object = MaterialEditorGui.currentObject;
   
   pushInstantGroup();
   %action.oldMaterial = new Material();
   %action.newMaterial = new Material();   
   popInstantGroup();
   
   MaterialEditorGui.copyMaterials( MaterialEditorGui.currentMaterial, %action.oldMaterial );
   MaterialEditorGui.copyMaterials( notDirtyMaterial, %action.newMaterial );
   
   %action.oldName = MaterialEditorGui.currentMaterial.getName();
   %action.newName = %this.originalName;
   
   MaterialEditorGui.submitUndo( %action );
   
   MaterialEditorGui.currentMaterial.setName( %this.originalName );
   MaterialEditorGui.copyMaterials( notDirtyMaterial, materialEd_previewMaterial );
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
      
   materialEd_previewMaterial.flush();
   materialEd_previewMaterial.reload();
   
   if (MaterialEditorGui.livePreview == true)
   {
      MaterialEditorGui.copyMaterials( notDirtyMaterial, MaterialEditorGui.currentMaterial );
      MaterialEditorGui.currentMaterial.flush();
      MaterialEditorGui.currentMaterial.reload();
   }
   
   MaterialEditorGui.setMaterialNotDirty();
}

//==============================================================================
// Looking up material instances/getting mat info 
function MaterialEditorGui::lookupMaterialInstances( %this )
{
   if( MaterialEditorGui.currentMaterial.getName() $= "" )
   {
      toolsMessageBoxOK("Cannot perform operation", "Unable to look up a material with a blank name" );
      return;   
   }
   
   MaterialInstanceViewTree.clear();
   MaterialInstanceViewTree.setFilterChildren(false);
   MaterialInstanceViewTree.setItemFilterException(1, true);
   
   MaterialEditorGui.currentMaterial.getMaterialInstances(MaterialInstanceViewTree);
   
   if(MaterialInstanceFilter.Text !$= "\c2Filter...")
   {
      MaterialInstanceViewTree.setFilterText(MaterialInstanceFilter.Text);
   }
   
   MaterialInstanceViewTree.buildVisibleTree(true);
   
   Canvas.pushDialog(MaterialInstanceViewCtrl);
}

//==============================================================================
// Switching and Changing Materials

function MaterialEditorGui::switchMaterial( %this, %material )
{
   //MaterialEditorGui.currentMaterial = %material.getId();
   MaterialEditorGui.currentObject = "";
   MaterialEditorGui.setMode();
   MaterialEditorGui.prepareActiveMaterial( %material.getId(), true );
}

/*------------------------------------------------------------------------------
 This changes the map to's of possibly two materials (%fromMaterial, %toMaterial)
 and updates the engines libraries accordingly in order to make this change per 
 object/per objects instances/per target. Before this functionality is enacted, 
 there is a popup beforehand that will ask if you are sure if you want to make
 this change. Making this change will physically alter possibly two materials." @ $TorqueScriptFileExtension @ " 
 files in order to move the (%fromMaterial, %toMaterial), replacing the 
 (%fromMaterials)'s mapTo to "unmapped_mat".
-------------------------------------------------------------------------------*/

function MaterialEditorGui::changeMaterial(%this, %fromMaterial, %toMaterial)
{
   %action = %this.createUndo(ActionChangeMaterial, "Change Material");
   %action.object = MaterialEditorGui.currentObject;
   
   %materialTarget = SubMaterialSelector.text;
   %action.materialTarget = %materialTarget;   
   
   %toMaterialDefinition = %toMaterial;
   
   %isMatAsset = false;
   if(AssetDatabase.isDeclaredAsset(%toMaterial))
   {
      %isMatAsset = true;
      MaterialEditorGui.currentMaterialAsset = %toMaterial;
      %assetDef = AssetDatabase.acquireAsset(%toMaterial);
      %toMaterialDefinition = %assetDef.materialDefinitionName;
      %filename = %assetDef.getScriptPath();
   }
   
   %action.fromMaterial = %fromMaterial;    
   %action.toMaterial = %toMaterial;   
   %action.toMaterialOldFname = %toMaterialDefinition.getFilename();
   %action.object =  MaterialEditorGui.currentObject;

   if( MaterialEditorGui.currentMeshMode $= "Model" ) // Models
   {
      %action.mode = "model";      
      
      if(!%isMatAsset)
      {
         MaterialEditorGui.currentObject.changeMaterial( %materialTarget, %fromMaterial.getName(), %toMaterialDefinition.getName() );
      }
      else
      {
         eval("MaterialEditorGui.currentObject." @ %materialTarget @ " = " @ %toMaterial);
      }
      
      if( MaterialEditorGui.currentObject.shapeName !$= "" ) 
         %sourcePath = MaterialEditorGui.currentObject.shapeName;
      else if( MaterialEditorGui.currentObject.isMethod("getDatablock") )
      {
         if( MaterialEditorGui.currentObject.getDatablock().shapeFile !$= "" )
            %sourcePath = MaterialEditorGui.currentObject.getDatablock().shapeFile;
      }
      
      if(!%isMatAsset)
      {
      // Creating "to" path
      %k = 0;
      while( strpos( %sourcePath, "/", %k ) != -1 )
      {
         %count = strpos( %sourcePath, "/", %k );
         %k = %count + 1;
      }
      %fileName = getSubStr( %sourcePath , 0 , %k );
      %fileName = %fileName @ "materials." @ $TorqueScriptFileExtension;
      
      %action.toMaterialNewFname = %fileName;
      
         MaterialEditorGui.prepareActiveMaterial( %toMaterialDefinition, true );
         if( !MaterialEditorGui.isMatEditorMaterial( %toMaterialDefinition ) )
      {
            matEd_PersistMan.removeObjectFromFile(%toMaterialDefinition);
         }
      }
      
      matEd_PersistMan.setDirty(%fromMaterial);
      matEd_PersistMan.setDirty(%toMaterialDefinition, %fileName);
      matEd_PersistMan.saveDirty();
      
      matEd_PersistMan.removeDirty(%fromMaterial);
      matEd_PersistMan.removeDirty(%toMaterialDefinition);
   }
   else // EditorShapes
   {
      %action.mode = "editorShapes";

      if(!%isMatAsset)
         MaterialEditorGui.currentObject.setFieldValue(SubMaterialSelector.getText(), %toMaterialDefinition.getName());
      else
         MaterialEditorGui.currentObject.setFieldValue(SubMaterialSelector.getText(), %toMaterial);
         
      if( MaterialEditorGui.currentObject.isMethod("postApply") )
         MaterialEditorGui.currentObject.postApply();
      
      MaterialEditorGui.prepareActiveMaterial( %toMaterialDefinition, true );
   }
   
   MaterialEditorGui.submitUndo( %action );
}

//==============================================================================
// Image thumbnail right-clicks.

// not yet functional
function MaterialEditorMapThumbnail::onRightClick( %this )
{
   if( !isObject( "MaterialEditorMapThumbnailPopup" ) )
      new PopupMenu( MaterialEditorMapThumbnailPopup )
      {
         superClass = "MenuBuilder";
         isPopup = true;
         
         item[ 0 ] = "Open File" TAB "" TAB "openFile( %this.filePath );";
         item[ 1 ] = "Open Folder" TAB "" TAB "openFolder( filePath( %this.filePath ) );";
         
         filePath = "";
      };
      
   // Find the text control containing the filename.
   
   %textCtrl = %this.parentGroup.findObjectByInternalName( %this.fileNameTextCtrl, true );
   if( !%textCtrl )
      return;
      
   %fileName = %textCtrl.getText();
   %fullPath = makeFullPath( %fileName, getMainDotCsDir() );
      
   // Construct a full path.
   
   %isValid = isFile( %fullPath );
   if( !%isValid )
   {
      if( isFile( %fileName ) )
      {
         %fullPath = %fileName;
         %isValid = true;
      }
      else
      {
         // Try material-relative path.
         
         %material = MaterialEditorGui.currentMaterial;
         if( isObject( %material ) )
         {
            %materialPath = filePath( makeFullPath( %material.getFilename(), getMainDotCsDir() ) );
            %fullPath = makeFullPath( %fileName, %materialPath );
            %isValid = isFile( %fullPath );
         }
      }
   }
   
   %popup = MaterialEditorMapThumbnailPopup;
   %popup.enableItem( 0, %isValid );
   %popup.enableItem( 1, %isValid );
   %popup.filePath = %fullPath;
   
   %popup.showPopup( Canvas );
}

// Accumulation
function MaterialEditorGui::updateAccuCheckbox(%this, %value)
{
   MaterialEditorGui.updateActiveMaterial("accuEnabled[" @ MaterialEditorGui.currentLayer @ "]", %value);   
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

// channel in selectors
function MaterialEditorGui::setRoughChan(%this, %value)
{
   MaterialEditorGui.updateActiveMaterial("RoughnessChan[" @ MaterialEditorGui.currentLayer @ "]", %value);   
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::setAOChan(%this, %value)
{
   MaterialEditorGui.updateActiveMaterial("aoChan[" @ MaterialEditorGui.currentLayer @ "]", %value);   
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::setMetalChan(%this, %value)
{
   MaterialEditorGui.updateActiveMaterial("metalChan[" @ MaterialEditorGui.currentLayer @ "]", %value);   
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
}

function MaterialEditorGui::saveCompositeMap(%this)
{
    %saveAs = "";
    %dlg = new SaveFileDialog()
    {
        Filters        = "PNG File (*.png)|*.png";
        DefaultPath    = EditorSettings.value("data/");
        ChangePath     = false;
        OverwritePrompt   = true;
    };

    %ret = %dlg.Execute();
    if(%ret)
    {
        // Immediately override/set the levelsDirectory
        EditorSettings.setValue( "art/shapes/textures", collapseFilename(filePath( %dlg.FileName )) );
        %saveAs = %dlg.FileName;
    }
    
   if( fileExt( %saveAs ) !$= ".png" )
      %saveAs = %saveAs @ ".png";
    
    %material = %this.currentMaterial;
    %layer = %this.currentLayer;
   
    %roughMap = %material.getRoughMap(%layer);
    %aoMap = %material.getAOMap(%layer);
    %metalMap = %material.getMetalMap(%layer);
    
    %roughness = %material.RoughnessChan[%layer];
    %ao = %material.AOChan[%layer];
    %metal = %material.metalChan[%layer];
    
    %channelKey = %roughness SPC %ao SPC %metal SPC 0;
    error("Storing: \"" @ %aoMap @"\" \""@ %roughMap @"\" \""@ %metalMap @"\" \""@ %channelKey @"\" \""@ %saveAs @"\"");
    saveCompositeTexture(%aoMap,%roughMap,%metalMap,"",%channelKey, %saveAs);
    %dlg.delete();
}

function MaterialEditorGui::swapMaterial(%this)
{
   AssetBrowser.showDialog("MaterialAsset", %this @ ".doSwapMaterial", "", "", "");
}
function MaterialEditorGui::doSwapMaterial(%this, %materialAsset)
{
   MaterialEditorGui.showMaterialChangeSaveDialog(%materialAsset);
}

//
//
function matEdDragNDropMapAssignment(%type, %payload)
{
   %assetType = %payload.assetType;
   if(%assetType !$= "ImageAsset")
      return;
      
   %module = %payload.moduleName;
   %assetName = %payload.assetName;
   %assetId = %module @ ":" @ %assetName;
   
   MaterialEditorGui.updatingTextureType = %type;
   MaterialEditorGui.guiSync( materialEd_previewMaterial );
   
   MaterialEditorGui.doUpdateTextureMap( %assetId );
}

function materialEditorDiffuseMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Diffuse", %payload);
}

function materialEditorNormalMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Normal", %payload);
}

function materialEditorORMConfigMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("ORMConfig", %payload);
}

function materialEditorRoughnessMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Roughness", %payload);
}

function materialEditorAOMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("AO", %payload);
}

function materialEditorMetalMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Metal", %payload);
}

function materialEditorGlowMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Glow", %payload);
}

function materialEditorDetailMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Detail", %payload);
}

function materialEditorDetailNormalMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("DetailNormal", %payload);
}

function materialEditorOverlayMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Overlay", %payload);
}

function materialEditorLightMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Light", %payload);
}

function materialEditorToneMapContainer::onControlDropped( %this, %payload, %position )
{
   matEdDragNDropMapAssignment("Tone", %payload);
}