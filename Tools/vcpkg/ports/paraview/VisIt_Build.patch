diff --git a/databases/readers/CEAucd/vtkCEAucdReader.C b/databases/readers/CEAucd/vtkCEAucdReader.C
index 0ad9a828a..cf37beb86 100644
--- a/databases/readers/CEAucd/vtkCEAucdReader.C
+++ b/databases/readers/CEAucd/vtkCEAucdReader.C
@@ -172,7 +172,7 @@ const char *vtkCEAucdReader::GetByteOrderAsString()
    }
 }
 
-void vtkCEAucdReader::SetFileStream( ifstream* istr )
+void vtkCEAucdReader::SetFileStream( std::ifstream* istr )
 {
    if( istr == this->FileStream ) return;
 
@@ -311,9 +311,9 @@ int vtkCEAucdReader::RequestInformation(
    {
       vtkDebugMacro(<<"Open file "<<this->FileName<<"\n");
 #ifdef _WIN32
-      this->FileStream = new ifstream(this->FileName, ios::in | ios::binary);
+      this->FileStream = new std::ifstream(this->FileName, std::ios::in | std::ios::binary);
 #else
-      this->FileStream = new ifstream(this->FileName, ios::in);
+      this->FileStream = new std::ifstream(this->FileName, std::ios::in);
 #endif
    }
 
@@ -340,7 +340,7 @@ int vtkCEAucdReader::RequestInformation(
          vtkDebugMacro(<<"Re-open file "<<this->FileName<<" in ASCII mode");
          delete this->FileStream; // close file to reopen it later
          this->FileStream = NULL;
-         this->FileStream = new ifstream(this->FileName, ios::in);
+         this->FileStream = new std::ifstream(this->FileName, std::ios::in);
       }
       
       char c='\0', buf[100];
diff --git a/databases/readers/CEAucd/vtkCEAucdReader.h b/databases/readers/CEAucd/vtkCEAucdReader.h
index c3a86c16b..434556488 100644
--- a/databases/readers/CEAucd/vtkCEAucdReader.h
+++ b/databases/readers/CEAucd/vtkCEAucdReader.h
@@ -49,7 +49,7 @@ class vtkCEAucdReader : public vtkUnstructuredGridAlgorithm
    public:
       static vtkCEAucdReader *New();
       vtkTypeMacro(vtkCEAucdReader,vtkUnstructuredGridAlgorithm);
-      void PrintSelf(ostream& os, vtkIndent indent) override;
+      void PrintSelf(std::ostream& os, vtkIndent indent) override;
       
      // Description:
      // Specify file name of CEA UCD datafile to read
@@ -120,7 +120,7 @@ class vtkCEAucdReader : public vtkUnstructuredGridAlgorithm
       vtkSetStringMacro(ActivePointArray);
       vtkGetStringMacro(ActivePointArray);
       
-      void SetFileStream( ifstream* istr );
+      void SetFileStream( std::ifstream* istr );
 
      // Description:
      // The following methods allow selective reading of solutions fields.  by
@@ -173,7 +173,7 @@ class vtkCEAucdReader : public vtkUnstructuredGridAlgorithm
       vtkIdType * PointsInMaterial;
       vtkIdType * CellIndexInMaterial;
       
-      ifstream *FileStream;
+      std::ifstream *FileStream;
       long GlobalOffset;
       long FileSize;
       bool OwnStream;
diff --git a/databases/readers/Image/vtkStimulateReader.C b/databases/readers/Image/vtkStimulateReader.C
index be91dc91e..aeec88891 100644
--- a/databases/readers/Image/vtkStimulateReader.C
+++ b/databases/readers/Image/vtkStimulateReader.C
@@ -104,7 +104,6 @@ int vtkStimulateReader::OpenFile(void)
   // Close file from any previous image
   if (this->File)
     {
-    this->File->close();
     delete this->File;
     this->File = NULL;
     }
@@ -122,9 +121,9 @@ int vtkStimulateReader::OpenFile(void)
   if ( !FileFunctions::VisItStat( sdt_name, &fs) )
     {
 #ifdef _WIN32
-    this->File = new ifstream(sdt_name, ios::in | ios::binary);
+    this->File = new std::ifstream(sdt_name, std::ios::in | std::ios::binary);
 #else
-    this->File = new ifstream(sdt_name, ios::in);
+    this->File = new std::ifstream(sdt_name, std::ios::in);
 #endif
     }
   if (! this->File || this->File->fail())
@@ -246,7 +245,7 @@ int vtkStimulateReader::CanReadFile(const char* fname)
     return 0;
     }
   
-  ifstream sdt_file(sdt_name);
+  std::ifstream sdt_file(sdt_name);
   if (sdt_file.fail())
     {
     vtkErrorMacro(<<"Cannot read file: invalid sdt_file " << sdt_name);
@@ -266,7 +265,7 @@ bool vtkStimulateReader::ReadSPRFile(const char *spr_name)
   haveReadSPRFile = true;
   validSPRFile = false;
 
-  ifstream spr_file(spr_name);
+  std::ifstream spr_file(spr_name);
   if (spr_file.fail())
     {
     vtkErrorMacro(<<"Unable to read SPR file " << spr_name << ": file "
