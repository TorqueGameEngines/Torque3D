name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    if: github.repository == 'TorqueGameEngines/Torque3D'
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Setup Environment
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               sudo apt-get update && \
               sudo apt-get install -y \
                 build-essential \
                 nasm \
                 libogg-dev \
                 libxft-dev \
                 libx11-dev \
                 libxxf86vm-dev \
                 libopenal-dev \
                 libfreetype6-dev \
                 libxcursor-dev \
                 libxinerama-dev \
                 libxi-dev \
                 libxrandr-dev \
                 libxss-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev
          fi
        shell: bash
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTORQUE_APP_NAME=Torque3D -DTORQUE_TESTING=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

      - name: Test
        run: |
          cd "${{github.workspace}}/My Projects/Torque3D/game"
          if [ "$RUNNER_OS" == "macOS" ]; then
             ./Torque3D_TEST.app/Contents/MacOS/Torque3D_TEST runTests.tscript
          else
             ./Torque3D_TEST runTests.tscript
          fi
        shell: bash

      # Make all paths conform to the Unix runner setup:
      - name: Replace Absolute Paths In Test Report
        run: |
          import os
          dir = os.environ["WorkspaceDirectory"]
          filePath = dir + "/My Projects/Torque3D/game/test_detail.xml"
          f = open(filePath, 'r')
          filedata = f.read()
          f.close()

          filedata = filedata.replace(dir, "/home/runner/work/Torque3D/Torque3D").replace("\\", "/")

          f = open(filePath, 'w')
          f.write(filedata)
          f.close()
        shell: python
        env:
          WorkspaceDirectory: ${{github.workspace}}

      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: junit-test-results-${{ runner.os }}
          path: '**/My Projects/Torque3D/game/test_detail.xml'
          retention-days: 1
