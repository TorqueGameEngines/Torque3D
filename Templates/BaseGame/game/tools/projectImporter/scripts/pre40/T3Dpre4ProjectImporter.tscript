function T3Dpre4ProjectImporter::setupModule(%this)
{
   %newModuleName = $ProjectImporter::moduleName;
      
   echo("Creating a new Module named: " @ %newModuleName);
   
   %moduleFilePath = "data/" @ %newModuleName;
   %moduleDefinitionFilePath = %moduleFilePath @ "/" @ %newModuleName @ ".module";
   %moduleScriptFilePath = %moduleFilePath @ "/" @ %newModuleName @ "." @ $TorqueScriptFileExtension;
   
   %newModule = new ModuleDefinition()
   {
      ModuleId = %newModuleName;
      versionId = 1;
      ScriptFile = %newModuleName @ "." @ $TorqueScriptFileExtension;
      CreateFunction="onCreate";
	   DestroyFunction="onDestroy";
	   Group = "Game";
      
      new DeclaredAssets()
      {
         Extension = "asset.taml";
         Recurse = true;
      };
   };
   
   TAMLWrite(%newModule, %moduleDefinitionFilePath); 
   
   //Now generate the script file for it
   %file = new FileObject();
   %templateFile = new FileObject();
   
   %moduleTemplateCodeFilePath = AssetBrowser.templateFilesPath @ "module.tscript.template";
   
   if(%file.openForWrite(%moduleScriptFilePath) && %templateFile.openForRead(%moduleTemplateCodeFilePath))
   {
      while( !%templateFile.isEOF() )
      {
         %line = %templateFile.readline();
         %line = strreplace( %line, "@@", %newModuleName );
         
         %file.writeline(%line);
         echo(%line);
      }
      
      %file.close();
      %templateFile.close();
   }
   else
   {
      %file.close();
      %templateFile.close();
      
      warnf("CreateNewModule - Something went wrong and we couldn't write the script file!");
   }
   
   //force a refresh of our modules list
   ModuleDatabase.ignoreLoadedGroups(true);
   ModuleDatabase.scanModules( "data", false );
   %success = ModuleDatabase.loadExplicit(%newModuleName, 1);
   ModuleDatabase.ignoreLoadedGroups(false);
   
   //force a reload of the Module lists
   AssetBrowser.refresh();
}

function T3Dpre4ProjectImporter::copyFiles(%this)
{
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   %currentPage-->fileCopyText.setText("Beginning copy of files to new module folder now. This may take a few minutes...");
   Canvas.repaint();
   
   %file = findFirstFileMultiExpr( $ProjectImporter::sourceContentFolder @ "/*.*", true);
   
   while( %file !$= "" )
   {
      %filePath = filePath(%file);
      %fileName = fileName(%file);
      %fileBase = fileBase(%file);
      %fileExt = fileExt(%file);
      
      if(endsWith(%fileName, ".asset.taml"))
      {
         %fileBase = strreplace(%fileBase, ".asset", "");
         %fileExt = ".asset.taml";
      }
      
      if(%fileExt $= ".dll" || %fileExt $= ".log" || %fileExt $= ".exe" || %fileExt $= ".manifest"|| %fileExt $= ".h" ||
         %fileExt $= ".cpp" || %fileExt $= ".so" || %fileExt $= ".do" || %fileExt $= ".lib" ||%fileExt $= ".exp")
      {
         %file = findNextFileMultiExpr( $ProjectImporter::sourceContentFolder @ "/*.*" );
         continue;
      }
      
      //filter out some unneeded folders
      %slashCount = getTokenCount(%filePath, "/");
      %topFolder = getToken(%filePath, "/", %slashCount-1);
      if(%topFolder $= "")
         %topFolder = getToken(%filePath, "/", %slashCount-2);
         
      if(%topFolder $= "creator" || %topFolder $= "tools" || %topFolder $= "web")
      {
         %file = findNextFileMultiExpr( $ProjectImporter::sourceContentFolder @ "/*.*" );
         continue;
      }
      
      %targetFilePath = strReplace(%file, $ProjectImporter::sourceContentFolder, $ProjectImporter::modulePath);
      
      %sanitizedFilename = sanitizeString(%fileBase);
      if(startsWith(%sanitizedFilename, "_"))
      {
         %sanitizedFilename = substr(%sanitizedFilename, 1, -1);
      }
      if(%sanitizedFilename !$= %fileBase)
      {
         %targetFilePath = filePath(%targetFilePath) @ "/" @ %sanitizedFilename @ %fileExt;
      }
      
      %targetFolder = filePath(%targetFilePath);
      
      if(!isDirectory(%targetFolder))
      {
         DirectoryHandler::createFolder(0, %targetFolder);
      }
      
      if(!pathCopy(%file, %targetFilePath, false))
      {
         error("Legacy Project Importer, failed to copy file: " @ %file @ " to destination: " @ %targetFilePath);
      }
      
      %file = findNextFileMultiExpr( $ProjectImporter::sourceContentFolder @ "/*.*" );
   }
   
   //
   //Now that we've done that, we'll load and scan the module for asset defs
   %file = findFirstFileMultiExpr( $ProjectImporter::modulePath @ "/*.asset.taml", true);
   
   while( %file !$= "" )
   {
      %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
      %moduleDef = ModuleDatabase.findModule(%moduleName, 1);
      
      AssetDatabase.addDeclaredAsset(%moduleDef, %file);
      
      %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*.asset.taml" );
   }
   //
   
   %currentPage-->fileCopyText.setValue("File copy done! Press Next to continue.");
   
   ProjectImportWindow-->nextButton.setActive(true);
   Canvas.repaint();
}

function T3Dpre4ProjectImporter::processImportedFiles(%this)
{
   if($ProjectImporter::importMode $= "CoreAndTools")
   {
      $ProjectImporter::modulePath = "Core";
      %this.doImport();
      
      $ProjectImporter::modulePath = "Tools";
      %this.doImport();
   }
   else
   {
      %this.doImport();
   }
   
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   %currentPage-->processingText.setText("Processing of files done! Press Next to continue.");
   ProjectImportWindow-->nextButton.setActive(true);
   Canvas.repaint();
}

function T3Dpre4ProjectImporter::doImport(%this)
{
   //Store off the current default import config
   %defaultConfig = EditorSettings.value("Assets/AssetImporDefaultConfig", "");
   EditorSettings.setValue("Assets/AssetImporDefaultConfig", "LegacyProjectImport");

   //Update asset content
   beginImageImport();
   
   %this.beginMaterialFilesImport();
   
   beginShapeImport();
   beginTerrainImport();
   beginLevelImport();
   beginGUIImport();
   
   %this.beginCodeFilesImport();
   
   EditorSettings.setValue("Assets/AssetImporDefaultConfig", %defaultConfig);
}

function T3Dpre4ProjectImporter::beginMaterialFilesImport(%this)
{
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   //First, wipe out any files inside the folder first
   %file = findFirstFileMultiExpr( $ProjectImporter::modulePath @ "/*/materials.*", true);
   
   %objectClassStack = new ArrayObject();
   %fileOutputLines = new ArrayObject();
   
   echo("Legacy Project Importer - Beginning processing of imported code files");
   
   //Walk through and process all code files to update references
   while( %file !$= "" )
   {      
      %fileWasChanged = false;
      
      %filename = fileName(%file);
      %fileBase = fileBase(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      
      $ProjectImporter::currentFilePath = %filePath @ "/";
      
      %currentPage-->processingText.setText("Processing material script file: " @ %file);
      Canvas.repaint();
      
      if ( $ProjectImporter::fileObject.openForRead( %file ) ) 
      {
         echo("Legacy Project Importer - Beginning process of file: " @ %file);
         %lineNum = 0;
         while ( !$ProjectImporter::fileObject.isEOF() ) 
         {
            %line = $ProjectImporter::fileObject.readLine();
            %trimmedLine = trim(%line);
            
            if(strIsMatchExpr("*new*(*)*", %line) && strpos(%line, "::") == -1)
            {
               %className = findObjectClass(%line, "new");

               if(%className !$= "Material" && %className !$= "CustomMaterial" && %className !$= "TerrainMaterial" && %className !$= "CubemapData")
                  {
                     %lineNum++;
                     %fileOutputLines.push_back(%line);
                     continue;
                  }
                  
                  %objectClassStack.push_back(%className);
               
               %objectName = findObjectName(%line, "new");
               
               if(%objectName $= "" && %className $= "TerrainMaterial")
                  {
                  %intName = findObjectField("internalName");
                  %objectName = %intName @ "_terrainMat";
                  %line = strReplace(%line, "()", "(" @ %intName @ ")");
                  
                  %fileWasChanged = true;
                  }
               else if(%objectName $= "" && %className $= "Material")
               {
                  %mapToName = findObjectField("mapTo");
                  %objectName = %mapToName @ "_mat";
                  %line = strReplace(%line, "()", "(" @ %mapToName @ ")");
                  
                  %fileWasChanged = true;
               }
                  
               %sanitizedName = sanitizeString(%objectName);
               if(startsWith(%sanitizedName, "_"))
               {
                  %sanitizedName = substr(%sanitizedName, 1, -1);
               }
               if(%sanitizedName !$= %objectName)
               {
                  %line = strReplace(%line, %objectName, %sanitizedName);
                  
                  %fileWasChanged = true;
               }
                  
                  if(%objectClassStack.count() == 1)
                  {
                  %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                  
                     //we only process top-level objects directly                 
                     %inheritanceList = getClassHierarchy(%currentObjClass);
                     for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                     {
                        %subclass = getWord(%inheritanceList, %classDepth);
                        %processFunction = "process" @ %subclass @ "Object";
                        if(%this.isMethod(%processFunction))
                        {
                           %this.call(%processFunction, %file, %objectName);
                        }
                     }
                  }
               }
            else if(strIsMatchExpr("*singleton*(*)*", %line))
            {
               %className = findObjectClass(%line, "singleton");
               
               if(%className !$= "Material" && %className !$= "CustomMaterial" && %className !$= "TerrainMaterial" && %className !$= "CubemapData")
                  {
                     %lineNum++;
                     %fileOutputLines.push_back(%line);
                     continue;
                  }
                  
                  %objectClassStack.push_back(%className);
               
               %objectName = findObjectName(%line, "singleton");
                  
               %sanitizedName = sanitizeString(%objectName);
               if(startsWith(%sanitizedName, "_"))
               {
                  %sanitizedName = substr(%sanitizedName, 1, -1);
               }
               if(%sanitizedName !$= %objectName)
               {
                  %line = strReplace(%line, %objectName, %sanitizedName);
                  
                  %fileWasChanged = true;
               }
               
                  if(%objectClassStack.count() == 1)
                  {
                  %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                  
                     //we only process top-level objects directly                 
                     %inheritanceList = getClassHierarchy(%currentObjClass);
                     for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                     {
                        %subclass = getWord(%inheritanceList, %classDepth);
                        %processFunction = "process" @ %subclass @ "Object";
                        if(%this.isMethod(%processFunction))
                        {
                           %this.call(%processFunction, %file, %objectName);
                        }
                     }
                  }
               }
            else if(strIsMatchExpr("*};*", %line))
            {
               //hit the end of an object, pop our object stack
               %objectClassStack.pop_back();
            }
            else
            {
               if(%objectClassStack.count() != 0)
               {
                  %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                  
                  %inheritanceList = getClassHierarchy(%currentObjClass);
                  for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                  {
                     %subclass = getWord(%inheritanceList, %classDepth);
                     %processFunction = "process" @ %subclass @ "Line";
                     if(%this.isMethod(%processFunction))
                     {
                        %outLine = %this.call(%processFunction, %line);

                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                     }
                  }
               }
            }
            %lineNum++;
            
            %fileOutputLines.push_back(%line);
         }
         
         $ProjectImporter::fileObject.close();
      }
      else
      {
         error("Legacy Project Importer - File not able to be opened: " @ %file);  
      }
      
      if(%fileWasChanged)
      {
         $ProjectImporter::fileObject.openForWrite(%file);

         for(%l = 0; %l < %fileOutputLines.count(); %l++)
         {
            %outLine = %fileOutputLines.getKey(%l);
            
            $ProjectImporter::fileObject.writeline(%outLine);
         }
         
         $ProjectImporter::fileObject.close();
      }
      
      %fileOutputLines.empty();
      %objectClassStack.empty();
      
      %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*/materials.*" );
   }
   
   echo("Legacy Project Importer - Processing of imported code files done!");
   
   %fileOutputLines.delete();
   %objectClassStack.delete();
   
   //now exec the materials
   loadModuleMaterials("Game");
}

function T3Dpre4ProjectImporter::beginCodeFilesImport(%this)
{
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   //First, wipe out any files inside the folder first
   %file = findFirstFileMultiExpr( $ProjectImporter::modulePath @ "/*.*", true);
   
   %objectClassStack = new ArrayObject();
   %fileOutputLines = new ArrayObject();
   
   echo("Legacy Project Importer - Beginning processing of imported code files");
   
   //Walk through and process all code files to update references
   while( %file !$= "" )
   {      
      if(!endsWith(%file, "cs") && 
         !endsWith(%file, "tscript") && 
         !endsWith(%file, "mis") && 
         !endsWith(%file, "gui") && 
         !endsWith(%file, "prefab"))
      {
         %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*.*" );
         continue;
      }
      
      %fileWasChanged = false;
      
      %filename = fileName(%file);
      %fileBase = fileBase(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      
      if(%filename $= "materials.cs" || %filename $= "materials.tscript" )
      {
         //we already handled materials script files, so skip
         %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*.*" );
         continue;
      }
      
      $ProjectImporter::currentFilePath = %filePath @ "/";
      
      %currentPage-->processingText.setText("Processing file: " @ %file);
      Canvas.repaint();
      
      if ( $ProjectImporter::fileObject.openForRead( %file ) ) 
      {
         echo("Legacy Project Importer - Beginning process of file: " @ %file);
         %lineNum = 0;
         while ( !$ProjectImporter::fileObject.isEOF() ) 
         {
            %line = $ProjectImporter::fileObject.readLine();
            %trimmedLine = trim(%line);
            
            if(strIsMatchExpr("*new*(*)*", %line) && strpos(%line, "::") == -1)
            {
               %className = findObjectClass(%line, "new");
               
               %objectClassStack.push_back(%className);
               
               %objectName = findObjectName(%line, "new");
               
               if(%objectName !$= "")
               {
                  %sanitizedName = sanitizeString(%objectName);
                  if(startsWith(%sanitizedName, "_"))
                  {
                     %sanitizedName = substr(%sanitizedName, 1, -1);
                  }
                  if(%sanitizedName !$= %objectName)
                  {
                     %line = strReplace(%line, %objectName, %sanitizedName);
                     
                     %fileWasChanged = true;
                  }
                  
                  if(%objectClassStack.count() == 1)
                  {
                     %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                     
                     //we only process top-level objects directly                     
                     %inheritanceList = getClassHierarchy(%currentObjClass);
                     for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                     {
                        %subclass = getWord(%inheritanceList, %classDepth);
                        %processFunction = "process" @ %subclass @ "Object";
                        if(%this.isMethod(%processFunction))
                        {
                           %this.call(%processFunction, %file, %objectName);
                        }
                     }
                  }
               }
               
               //special handling here
               if(%fileExt $= ".mis")
               {
                  if(%className $= "SimGroup" && %objectName $= "MissionGroup") 
                  {
                     if(%this.isMethod("processMissionGroupLine"))
                     {
                        %outLine = %this.call("processMissionGroupLine", %line, %fileBase);
                        
                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                     }
                  }
                  else if(%className $= "ScriptObject" && %objectName $= "MissionInfo") 
                  {
                     if(%this.isMethod("processLevelInfoLine"))
                     {
                        %outLine = %this.call("processLevelInfoLine", %line);
                        
                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                     }
                  }
                  else if(%className $= "Sky") 
                  {
                     if(%this.isMethod("processSkyLine"))
                     {
                        %outLine = %this.call("processSkyLine", %line);
                        
                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                     }
                  }
                  else if(%className $= "Water") 
                  {
                     if(%this.isMethod("processWaterLine"))
                     {
                        %outLine = %this.call("processWaterLine", %line);
                        
                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                     }
                  }
               }
            }
            else if(strIsMatchExpr("*singleton*(*)*", %line))
            {
               %className = findObjectClass(%line, "singleton");
               
               %objectClassStack.push_back(%className);
               
               %objectName = findObjectName(%line, "singleton");
               
               if(%objectName !$= "")
               {
                  %sanitizedName = sanitizeString(%objectName);
                  if(startsWith(%sanitizedName, "_"))
                  {
                     %sanitizedName = substr(%sanitizedName, 1, -1);
                  }
                  if(%sanitizedName !$= %objectName)
                  {
                     %line = strReplace(%line, %objectName, %sanitizedName);
                     
                     %fileWasChanged = true;
                  }
               
                  if(%objectClassStack.count() == 1)
                  {
                     %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                     
                     //we only process top-level objects directly
                     %inheritanceList = getClassHierarchy(%currentObjClass);
                     for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                     {
                        %subclass = getWord(%inheritanceList, %classDepth);
                        %processFunction = "process" @ %subclass @ "Object";
                        if(%this.isMethod(%processFunction))
                        {
                           %this.call(%processFunction, %file, %objectName);
                        }
                     }
                  }
               }
            }
            else if(strIsMatchExpr("*datablock*(*)*", %line) && (strPos(%line, "registerDatablock") == -1))
            {
               %className = findObjectClass(%line, "datablock");
               
               %objectClassStack.push_back(%className);
               
               %objectName = findObjectName(%line, "datablock");
               
               if(%objectName !$= "")
               {
                  if(%objectClassStack.count() == 1)
                  {
                     %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                     
                     //we only process top-level objects directly
                     %inheritanceList = getClassHierarchy(%currentObjClass);
                     for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                     {
                        %subclass = getWord(%inheritanceList, %classDepth);
                        %processFunction = "process" @ %subclass @ "Object";
                        if(%this.isMethod(%processFunction))
                        {
                           %this.call(%processFunction, %file, %objectName);
                        } 
                     }
                  }
               }
            }
            else if(strIsMatchExpr("*};*", %line))
            {
               //hit the end of an object, pop our object stack
               %objectClassStack.pop_back();
            }
            else if(strIsMatchExpr("*exec(*.cs*)*", %line) || strIsMatchExpr("*exec(*.tscript*)*", %line))
            {
               %scriptExtRemovedLine = strReplace(%line, ".cs", "");
               %scriptExtRemovedLine = strReplace(%scriptExtRemovedLine, ".tscript", "");
               %line = %scriptExtRemovedLine;
               %fileWasChanged = true;
            }
            else if(strIsMatchExpr("*queueexec(*.cs*)*", %line) || strIsMatchExpr("*queueexec(*.tscript*)*", %line))
            {
               %scriptExtRemovedLine = strReplace(%line, ".cs", "");
               %scriptExtRemovedLine = strReplace(%scriptExtRemovedLine, ".tscript", "");
               %line = %scriptExtRemovedLine;
               %fileWasChanged = true;
            }
            else if(strIsMatchExpr("*registerDatablock(*.cs*)*", %line) || strIsMatchExpr("*registerDatablock(*.tscript*)*", %line))
            {
               %scriptExtRemovedLine = strReplace(%line, ".cs", "");
               %scriptExtRemovedLine = strReplace(%scriptExtRemovedLine, ".tscript", "");
               %line = %scriptExtRemovedLine;
               %fileWasChanged = true;
               
            }
            else if(strIsMatchExpr("*%this.addSequence(\"*);", %line))
            {
               %outLine = processLegacyShapeConstructorField(%line);
               if(%line !$= %outLine)
               {
                  %fileWasChanged = true;
                  %line = %outLine;
               }
            }
            else
            {
               if(%objectClassStack.count() != 0)
               {
                  %currentObjClass = %objectClassStack.getKey(%objectClassStack.count()-1);
                  
                  %inheritanceList = getClassHierarchy(%currentObjClass);
                  for (%classDepth =0; %classDepth<getWordCount(%inheritanceList); %classDepth++)
                  {
                     %subclass = getWord(%inheritanceList, %classDepth);
                     %processFunction = "process" @ %subclass @ "Line";
                     if(%this.isMethod(%processFunction))
                     {
                        %outLine = %this.call(%processFunction, %line);

                        if(%line !$= %outLine)
                        {
                           %fileWasChanged = true;
                           %line = %outLine;
                        }
                      }
                  }
               }
            }
            %lineNum++;
            
            %fileOutputLines.push_back(%line);
         }
         
         $ProjectImporter::fileObject.close();
      }
      else
      {
         error("Legacy Project Importer - File not able to be opened: " @ %file);  
      }
      
      if(%fileWasChanged)
      {
         $ProjectImporter::fileObject.openForWrite(%file);

         for(%l = 0; %l < %fileOutputLines.count(); %l++)
         {
            %outLine = %fileOutputLines.getKey(%l);
            
            $ProjectImporter::fileObject.writeline(%outLine);
         }
         
         $ProjectImporter::fileObject.close();
      }
      
      %fileOutputLines.empty();
      %objectClassStack.empty();
      
      %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*.*" );
   }
   
   echo("Legacy Project Importer - Processing of imported code files done!");
   
   //exec common loader files, process the remainder into assets
   
   //beginMaterialImport();
   //beginGUIImport();
   //beginTerrainMaterialImport();
   //beginTerrainImport();
   
   %fileOutputLines.delete();
   %objectClassStack.delete();
}

function T3Dpre4ProjectImporter::processScriptExtensions(%this)
{
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   if($TorqueScriptFileExtension $= "tscript")
      %file = findFirstFileMultiExpr( $ProjectImporter::modulePath @ "/*/*.cs", true);
   else
      %file = findFirstFileMultiExpr( $ProjectImporter::modulePath @ "/*/*.tscript", true);
   
   echo("Legacy Project Importer - Beginning processing of script files that utilize extensions other than: " @ $TorqueScriptFileExtension);
   
   //Walk through and process all code files to update references
   while( %file !$= "" )
   {      
      %fileWasChanged = false;
      
      %filename = fileName(%file);
      %fileBase = fileBase(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      
      $ProjectImporter::currentFilePath = %filePath @ "/";
      
      %currentPage-->processingText.setText("Processing material script file: " @ %file);
      Canvas.repaint();
      
      %targetFilePath = %filePath @ "/" @ %fileBase @ "." @ $TorqueScriptFileExtension;
      if(!pathCopy(%file, %targetFilePath))
      {
         error("T3Dpre4ProjectImporter::processScriptExtensions() - Failed to create renamed script file for file: " @ %file);
      }
      else
      {
         if(!fileDelete(%file))
         {
            error("T3Dpre4ProjectImporter::processScriptExtensions() - Failed to remove old script file for rename: " @ %file);
         }         
      }
      
      if($TorqueScriptFileExtension $= "tscript")
         %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*/*.cs");
      else
         %file = findNextFileMultiExpr( $ProjectImporter::modulePath @ "/*/*.tscript");
   }
   
   %currentPage = ProjectImportWindow.getCurrentPage();
   
   %currentPage-->processingText.setText("Processing of script files done! Press Next to continue.");
   ProjectImportWindow-->nextButton.setActive(true);
   Canvas.repaint();
   
   echo("Legacy Project Importer - Beginning processing of script files extensions complete");
}

//To implement a custom class to have it's fields processed, just utilize this template function
//and replace the class/field spaces as appropriate
/*
function T3Dpre4ProjectImporter::process<ClassName>Line(%this, %line)
{
   %outLine = processLegacyField(%line, "<originalFilenameField>", "<newAssetField>");
  
   if(%outLine !$= %line)
      return %outLine;
   else
      return %line;
}
*/
//==============================================================================
// Misc Object Classes
//==============================================================================
function T3Dpre4ProjectImporter::genProcessor(%classType, %conversionMap)
{
    %stryng = "function T3Dpre4ProjectImporter::process" @%classType@ "Line(%this, %line){\n";
    %count = getWordCount(%conversionMap);
    for (%i = 0; %i<%count; %i+=2)
    {
        %stryng = %stryng @ " %outLine = processLegacyField(%line,\""@ getWord(%conversionMap,%i)@ "\",\""@ getWord(%conversionMap,%i+1)@"\");\n";
        %stryng = %stryng @ "  if(%outLine !$= %line) return %outLine;\n";
    }
    %stryng = %stryng @ " return %line;\n}";
    eval(%stryng);
}

T3Dpre4ProjectImporter::genProcessor("TSShapeConstructor", "baseShape baseShapeAsset shapeName shapeAsset");
T3Dpre4ProjectImporter::genProcessor("BasicClouds", "texture textureAsset");
T3Dpre4ProjectImporter::genProcessor("CloudLayer", "texture textureAsset");
T3Dpre4ProjectImporter::genProcessor("DecalRoad", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("MeshRoad", "topMaterial topMaterialAsset bottomMaterial bottomMaterialAsset sideMaterial sideMaterialAsset");
T3Dpre4ProjectImporter::genProcessor("ScatterSky", "moonMat moonMatAsset");
T3Dpre4ProjectImporter::genProcessor("Sun", "coronaMaterial coronaMaterialAsset");
T3Dpre4ProjectImporter::genProcessor("VolumetricFog", "shape ShapeAsset texture textureAsset");
T3Dpre4ProjectImporter::genProcessor("WaterObject", "rippleTex rippleTexAsset foamTex foamTexAsset depthGradientTex depthGradientTexAsset");
T3Dpre4ProjectImporter::genProcessor("ConvexShape", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("RenderMesh", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("RenderShape", "shape shapeAsset");
T3Dpre4ProjectImporter::genProcessor("GroundCover", "material materialAsset shape shapeAsset shapeFilename shapeAsset");
T3Dpre4ProjectImporter::genProcessor("GroundPlane", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("LevelInfo", "accuTexture accuTextureAsset");
T3Dpre4ProjectImporter::genProcessor("TSStatic", "shape shapeAsset shapeName shapeAsset");
T3Dpre4ProjectImporter::genProcessor("TSForestItemData", "shape shapeAsset shapeName shapeAsset shapeFile shapeAsset");
T3Dpre4ProjectImporter::genProcessor("TerrainBlock", "terrainFile terrainAsset");
//==============================================================================
// Levels
//==============================================================================
function T3Dpre4ProjectImporter::processMissionGroupLine(%this, %line, %missionName)
{
   %outline = strreplace(%line, "SimGroup(MissionGroup)", "Scene(" @ %missionName @ ")");
   
   if(%outLine !$= %line)
      return %outLine;
   else
      return %line;
}

function T3Dpre4ProjectImporter::processLevelInfoLine(%this, %line)
{
   %outline = strreplace(%line, "ScriptObject(MissionInfo)", "LevelInfo(theLevelInfo)");
   
   if(%outLine !$= %line)
      return %outLine;
   else
      return %line;
}

function T3Dpre4ProjectImporter::processSkyLine(%this, %line)
{
   %outline = strreplace(%line, "Sky", "Skybox");
   
   if(%outLine !$= %line)
      return %outLine;
   else
      return %line;
}

function T3Dpre4ProjectImporter::processWaterLine(%this, %line)
{
   %outline = strreplace(%line, "Water", "WaterPlane");
   
   if(%outLine !$= %line)
      return %outLine;
   else
      return %line;
}

//==============================================================================
// GUIs
//==============================================================================
T3Dpre4ProjectImporter::genProcessor("GuiIconButtonCtrl", "bitmap bitmapAsset iconBitmap bitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiToolboxButtonCtrl", "normalBitmap normalBitmapAsset loweredBitmap loweredBitmapAsset hoverBitmap hoverBitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiBitmapCtrl", "bitmap bitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiMaterialCtrl", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("GuiCursor", "bitmap bitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiChunkedBitmapCtrl", "bitmap bitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiProgressBitmap", "bitmap bitmapAsset");
T3Dpre4ProjectImporter::genProcessor("GuiMissionArea", "handleBitmap handleBitmapAsset");
T3Dpre4ProjectImporter::genProcessor("WorldEditor", "selectHandle selectHandleAsset defaultHandle defaultHandleAsset lockedHandle lockedHandleAsset");
T3Dpre4ProjectImporter::genProcessor("GuiControlProfile", "bitmap bitmapAsset");

function T3Dpre4ProjectImporter::processGuiBitmapButtonCtrlLine(%this, %line)
{
   %outLine = processGuiBitmapButtonCtrlField(%line, "bitmap", "bitmapAsset");
   if(%outLine !$= %line) return %outLine;
   
   return %line;
}

//==============================================================================
// Datablocks
//==============================================================================
T3Dpre4ProjectImporter::genProcessor("ForestItemData", "shape shapeAsset");
T3Dpre4ProjectImporter::genProcessor("CubeMapData", "cubemapFace cubeMapFaceAsset cubemap cubemapAsset cubeFace cubeMapFaceAsset");
T3Dpre4ProjectImporter::genProcessor("DebrisData", "shape shapeAsset shapeFile shapeAsset");
T3Dpre4ProjectImporter::genProcessor("DecalData", "material materialAsset");
T3Dpre4ProjectImporter::genProcessor("ExplosionData", "explosionShape explosionShapeAsset");
T3Dpre4ProjectImporter::genProcessor("ParticleData", "texture textureAsset textureName textureAsset textureExt textureExtAsset textureExtName textureExtAsset");
T3Dpre4ProjectImporter::genProcessor("PrecipitationData", "drop dropAsset dropTexture dropAsset splash splashAsset splashTexture splashAsset");
T3Dpre4ProjectImporter::genProcessor("SplashData", "texture textureAsset");
T3Dpre4ProjectImporter::genProcessor("LightFlareData", "flareTexture flareTextureAsset");
T3Dpre4ProjectImporter::genProcessor("PhysicsDebrisData", "shape shapeAsset shapeFile shapeAsset");
T3Dpre4ProjectImporter::genProcessor("PhysicsShapeData", "shape shapeAsset");
T3Dpre4ProjectImporter::genProcessor("PlayerData", "shapeFP shapeFPAsset shapeNameFP shapeFPAsset");
T3Dpre4ProjectImporter::genProcessor("ProjectileData", "projectileShape projectileShapeAsset projectileShapeName projectileShapeAsset");
T3Dpre4ProjectImporter::genProcessor("ShapeBaseData", "shapeFile shapeAsset shape shapeAsset debrisShape debrisShapeAsset debrisShapeName debrisShapeAsset");
T3Dpre4ProjectImporter::genProcessor("ShapeBaseImageData", "shape shapeAsset[0] shapeFP shapeAsset[1] shapeFile shapeAsset[0] shapeFileFP shapeAsset[1]");
T3Dpre4ProjectImporter::genProcessor("WheeledVehicleTire", "shape shapeAsset shapeFile shapeAsset");
//==============================================================================
// Materials
//==============================================================================
//long form of the result of T3Dpre4ProjectImporter::genProcessor since that would result in a rediculously long oneliner
function T3Dpre4ProjectImporter::processMaterialLine(%this, %line)
{
   %outLine = processLegacyField(%line, "baseTex", "diffuseMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "diffuseMap", "diffuseMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "lightMap", "lightMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "toneMap", "toneMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "detailTex", "detailMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "detailMap", "detailMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "overlayTex", "overlayMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "overlayMap", "overlayMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "bumpTex", "normalMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "normalMap", "normalMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "ormConfigMap", "ormConfigMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "roughMap", "roughMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "aoMap", "aoMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "metalMap", "metalMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "glowMap", "glowMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "detailNormalMap", "detailNormalMapAsset");
   if(%outLine !$= %line) return %outLine;
   return %line;
}

function T3Dpre4ProjectImporter::processMaterialObject(%this, %file, %objectName)
{
   %matAsset = MaterialAsset::getAssetIdByMaterialName(%objectName);
   
   if(%matAsset $= "" || %matAsset $= "Core_Rendering:NoMaterial")
   {
      %assetName = %objectName;
   
      %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
      
      %assetPath = filePath(%file) @ "/";   
      
      %tamlpath = %assetPath @ %assetName @ ".asset.taml";
      
      if(isFile(%tamlpath))
      {
         error("T3Dpre4ProjectImporter::processMaterialObject() - Failed to create as taml file already exists: " @ %file);
         return false;
      }
      
      %asset = new MaterialAsset()
      {
         AssetName = %assetName;
         versionId = 1;
         shaderData = "";
         materialDefinitionName = %assetName;
         scriptFile = fileBase(%file);
      };
      
      TamlWrite(%asset, %tamlpath);
      
      %moduleDef = ModuleDatabase.findModule(%moduleName, 1);
      %success = AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
      
      if(!%success)
         return false;
   }
   
   return false;
}

function T3Dpre4ProjectImporter::processTerrainMaterialLine(%this, %line)
{
   %outLine = processLegacyField(%line, "diffuseMap", "diffuseMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "normalMap", "normalMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "detailMap", "detailMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "ORMConfigMap", "ORMConfigMapAsset");
   if(%outLine !$= %line) return %outLine;
   %outLine = processLegacyField(%line, "macroMap", "macroMapAsset");
   if(%outLine !$= %line) return %outLine;
   return %line;
}

function T3Dpre4ProjectImporter::processTerrainMaterialObject(%this, %file, %objectName)
{
   %matAsset = TerrainMaterialAsset::getAssetIdByMaterialName(%objectName);
   
   if(%matAsset $= "" || %matAsset $= "Core_Rendering:noMaterial")
   {
      %assetName = %objectName;
   
      %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
      
      %assetPath = filePath(%file) @ "/";   
      
      %tamlpath = %assetPath @ %assetName @ ".asset.taml";
      
      if(isFile(%tamlpath))
      {
         error("T3Dpre4ProjectImporter::processTerrainMaterialObject() - Failed to create as taml file already exists: " @ %file);
         return false;
      }
      
      %asset = new TerrainMaterialAsset()
      {
         AssetName = %assetName;
         versionId = 1;
         shaderData = "";
         materialDefinitionName = %objectName;
         scriptFile = fileName(%file);
      };
      
      TamlWrite(%asset, %tamlpath);
      
      %moduleDef = ModuleDatabase.findModule(%moduleName, 1);
      %success = AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
      
      if(!%success)
         return false;
   }
   
   return false;
}
//==============================================================================
// PostEffects
//==============================================================================
T3Dpre4ProjectImporter::genProcessor("PostEffect", "texture textureAsset");


//==============================================================================
// Misc Utility functions
//==============================================================================
//This is functionally identical to processLegacyField, but we have to special-snowflake our asset lookups
//due to it using suffix-based indirections
function processGuiBitmapButtonCtrlField(%line, %originalFieldName, %newFieldName)
{
   if(!strIsMatchExpr("*"@%originalFieldName@"=*\"*\";*", %line) && 
      !strIsMatchExpr("*"@%originalFieldName@"[*=*\"*\";*", %line) &&
      !strIsMatchExpr("*"@%originalFieldName@" *=*\"*\";*", %line))
      return %line;
      
   %outLine = strreplace(%line, %originalFieldName, %newFieldName);
   
   //get the value
   %value = "";
   %pos = strpos(%outLine, "= \"");
   if(%pos != -1)
   {
     %endPos = strpos(%outLine, "\";", %pos); 
     
     %value = getSubStr(%outLine, %pos+3, %endPos-%pos-3);
   }
   else
   {
      %pos = strpos(%outLine, "=\"");
      if(%pos != -1)
      {
        %endPos = strpos(%outLine, "\";", %pos); 
        
        %value = getSubStr(%outLine, %pos+2, %endPos-%pos-2);
      }
   }
   
   if(%outLine !$= %line && %pos != -1 && %endPos != -1 && %value !$= "")
   {
      echo("Legacy Project Importer - processing legacy field line: " @ %line);
      
      if(startsWith(%value, "$") || startsWith(%value, "#"))
      {
         //These are going to be texture/render targets, and we can leave them alone
         return %line;
      }
      
      %targetFilename = sanitizeFilename(%value);
      
      //If we still have nothing, then we fail it out
      if(!isFile(%targetFilename))
      {
         error("Legacy Project Importer - file described in line could not be found/is not valid");
         return %line;
      }
      
      $ProjectImporter::assetQuery.clear();
      %foundAssets = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %targetFilename);
      if(%foundAssets != 0)
      {
         %assetId = $ProjectImporter::assetQuery.getAsset(0);
         echo("Legacy Project Importer - processing of legacy field line's value: " @ %value @ " has found a matching AssetId: " @ %assetId);
      }
     
      if(%assetId !$= "" && AssetDatabase.isDeclaredAsset(%assetId))
      {
         //if (%assetId.getStatusString() $= "Ok")
         %outLine = strReplace(%outLine, %value, %assetId);
         //else
         //   error("Asset assignment failure:", %assetId, getStatusString());
      }
   }
   
   if(%outLine !$= %line)
   {
      echo("Legacy Project Importer - processing of legacy line: " @ %line @ " has been updated to: " @ %outLine);
      return %outLine;  
   }
   else
   {
      return %line;  
   }
}

